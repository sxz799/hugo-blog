<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on 青丝蘸白雪i</title><link>https://blog.sxz799.xyz/posts/</link><description>Recent content in Posts on 青丝蘸白雪i</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sun, 20 Aug 2023 00:16:17 +0800</lastBuildDate><atom:link href="https://blog.sxz799.xyz/posts/rss.xml" rel="self" type="application/rss+xml"/><item><title>记录一次折腾了一下午的nginx配置文件问题</title><link>https://blog.sxz799.xyz/posts/%E6%8A%80%E5%B7%A7/2023-08-20-%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E6%8A%98%E8%85%BE%E4%BA%86%E4%B8%80%E4%B8%8B%E5%8D%88%E7%9A%84nginx%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E9%97%AE%E9%A2%98/</link><pubDate>Sun, 20 Aug 2023 00:16:17 +0800</pubDate><guid>https://blog.sxz799.xyz/posts/%E6%8A%80%E5%B7%A7/2023-08-20-%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E6%8A%98%E8%85%BE%E4%BA%86%E4%B8%80%E4%B8%8B%E5%8D%88%E7%9A%84nginx%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E9%97%AE%E9%A2%98/</guid><description>&lt;p>想着写一个后端使用gin + gorm + mysql,前端使用vue3 vite + element plus 的项目模板，但是在写docker-compose调试的时候,总是报404错误，后来发现是nginx配置文件的问题。&lt;/p></description></item><item><title>Golang实现Set集合</title><link>https://blog.sxz799.xyz/posts/golang/2023-08-14-golang%E5%AE%9E%E7%8E%B0set%E9%9B%86%E5%90%88/</link><pubDate>Mon, 14 Aug 2023 10:17:14 +0800</pubDate><guid>https://blog.sxz799.xyz/posts/golang/2023-08-14-golang%E5%AE%9E%E7%8E%B0set%E9%9B%86%E5%90%88/</guid><description>&lt;p>代码:&lt;/p></description></item><item><title>Ruoyi框架部门多选配置</title><link>https://blog.sxz799.xyz/posts/%E6%8A%80%E5%B7%A7/2023-08-02-ruoyi%E6%A1%86%E6%9E%B6%E9%83%A8%E9%97%A8%E5%A4%9A%E9%80%89%E9%85%8D%E7%BD%AE/</link><pubDate>Wed, 02 Aug 2023 21:48:06 +0800</pubDate><guid>https://blog.sxz799.xyz/posts/%E6%8A%80%E5%B7%A7/2023-08-02-ruoyi%E6%A1%86%E6%9E%B6%E9%83%A8%E9%97%A8%E5%A4%9A%E9%80%89%E9%85%8D%E7%BD%AE/</guid><description>&lt;p>开发中遇到一个需求,简化一下可以理解为为一个用户配置多个部门。通常情况下要用主子表实现,但这里仅需要记录一个编码，故放在主表一个字段里即可(用逗号分隔)。如果想方便的禁用或启用某个部门,还是用主子表实现比较好。&lt;/p></description></item><item><title>Linux登录后出现bash4.2解决办法及原因</title><link>https://blog.sxz799.xyz/posts/%E6%8A%80%E5%B7%A7/2023-05-30-linux%E7%99%BB%E5%BD%95%E5%90%8E%E5%87%BA%E7%8E%B0bash4.2%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95%E5%8F%8A%E5%8E%9F%E5%9B%A0/</link><pubDate>Tue, 30 May 2023 15:52:58 +0800</pubDate><guid>https://blog.sxz799.xyz/posts/%E6%8A%80%E5%B7%A7/2023-05-30-linux%E7%99%BB%E5%BD%95%E5%90%8E%E5%87%BA%E7%8E%B0bash4.2%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95%E5%8F%8A%E5%8E%9F%E5%9B%A0/</guid><description>&lt;h3 id="前言">前言
&lt;a class="header-anchor" href="#%e5%89%8d%e8%a8%80">&lt;/a>
&lt;/h3>&lt;p>有一天链接服务器发现变成了变成了这个样子&lt;/p>
&lt;p>&lt;img src="https://blog.sxz799.xyz/imgs/img-lazy-loading.gif" data-src="https://gh.sxz799.online/https://raw.githubusercontent.com/sxz799/tuchuang-blog/main/img/202305/202305301559815.png" alt="" />&lt;/p>
&lt;p>前段时间更新测试时,由于添加了log组件导致将/root目录软链接到了更新目录,在删除目录时将root目录内的东西都删了。再次链接服务器就出现了&lt;code>bash-4.2#&lt;/code>而不是用户名,搜了一下，发现是缺失root目录下的
&lt;code>.bash_profile&lt;/code>和&lt;code>.bashrc&lt;/code> 。&lt;/p></description></item><item><title>使用Cloudflare加速github下载及图床加速</title><link>https://blog.sxz799.xyz/posts/%E6%8A%80%E5%B7%A7/2023-05-25-%E4%BD%BF%E7%94%A8cloudflare%E5%8A%A0%E9%80%9Fgithub%E4%B8%8B%E8%BD%BD%E5%8F%8A%E5%9B%BE%E5%BA%8A%E5%8A%A0%E9%80%9F/</link><pubDate>Thu, 25 May 2023 15:11:46 +0800</pubDate><guid>https://blog.sxz799.xyz/posts/%E6%8A%80%E5%B7%A7/2023-05-25-%E4%BD%BF%E7%94%A8cloudflare%E5%8A%A0%E9%80%9Fgithub%E4%B8%8B%E8%BD%BD%E5%8F%8A%E5%9B%BE%E5%BA%8A%E5%8A%A0%E9%80%9F/</guid><description>&lt;p>网上很多加速github的工具，但是由于使用人数多，效果时好时坏，后来发现可以使用cloudflare搭建自己专属的加速工具，故记录一下搭建流程及使用方式&lt;/p></description></item><item><title>Github拉取代码时提示kex_exchange_identification解决方案</title><link>https://blog.sxz799.xyz/posts/%E6%8A%80%E5%B7%A7/2023-05-12-github%E6%8B%89%E5%8F%96%E4%BB%A3%E7%A0%81%E6%97%B6%E6%8F%90%E7%A4%BAkex_exchange_identification%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</link><pubDate>Fri, 12 May 2023 19:58:41 +0800</pubDate><guid>https://blog.sxz799.xyz/posts/%E6%8A%80%E5%B7%A7/2023-05-12-github%E6%8B%89%E5%8F%96%E4%BB%A3%E7%A0%81%E6%97%B6%E6%8F%90%E7%A4%BAkex_exchange_identification%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</guid><description>&lt;p>最近在github上拉取和推送代码时经常报&lt;code>kex_exchange_identification&lt;/code>的错误,但是更换手机热点后就可以正常推代码,查了一下发现可能是梯子的问题，这里记录一下搜到的解决方案。&lt;/p></description></item><item><title>GithubAction自动编译项目学习笔记</title><link>https://blog.sxz799.xyz/posts/%E6%8A%80%E5%B7%A7/2023-05-09-githubaction%E8%87%AA%E5%8A%A8%E7%BC%96%E8%AF%91%E9%A1%B9%E7%9B%AE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link><pubDate>Tue, 09 May 2023 14:32:21 +0800</pubDate><guid>https://blog.sxz799.xyz/posts/%E6%8A%80%E5%B7%A7/2023-05-09-githubaction%E8%87%AA%E5%8A%A8%E7%BC%96%E8%AF%91%E9%A1%B9%E7%9B%AE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid><description>&lt;p>最近项目上线要将旧系统的数据导入新系统，旧系统的数据导出到excel文件，然后将文件整理后导入新系统。但是整理文件的时候总是会出现一些简单的错误，每次都有人工校对或者导入时提示太麻烦，于是写了一个小工具让整理数据的门店人员整理数据后自行检测一次。由于数据库使用的是sqlite，我本地的开发环境又是mac，这就导致golang交叉编译时要配置gcc,试了一下，感觉太麻烦了。也尝试过开个虚拟机进行编译，发现效果也不满意。后来发现github action可以在推送项目后自动构建项目，于是实现了项目推到github后,由Github自动编译并打包项目。&lt;/p></description></item><item><title>使用Vercel部署托管在github上的前端项目</title><link>https://blog.sxz799.xyz/posts/%E6%8A%80%E5%B7%A7/2023-04-06-%E4%BD%BF%E7%94%A8vercel%E9%83%A8%E7%BD%B2%E6%89%98%E7%AE%A1%E5%9C%A8github%E4%B8%8A%E7%9A%84%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE/</link><pubDate>Thu, 06 Apr 2023 16:40:53 +0800</pubDate><guid>https://blog.sxz799.xyz/posts/%E6%8A%80%E5%B7%A7/2023-04-06-%E4%BD%BF%E7%94%A8vercel%E9%83%A8%E7%BD%B2%E6%89%98%E7%AE%A1%E5%9C%A8github%E4%B8%8A%E7%9A%84%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE/</guid><description>&lt;p>之前写了一个便携剪切板小工具，部署在家里的群晖上面，方便工作时随时写日报。前段时间发现可以用Vercel部署前端项目，还可以自定义域名，这样就不用每次都输入端口信息了。&lt;/p></description></item><item><title>Openwrt去除小米电视广告</title><link>https://blog.sxz799.xyz/posts/%E6%8A%80%E5%B7%A7/2023-03-24-openwrt%E5%8E%BB%E9%99%A4%E5%B0%8F%E7%B1%B3%E7%94%B5%E8%A7%86%E5%B9%BF%E5%91%8A/</link><pubDate>Fri, 24 Mar 2023 23:42:39 +0800</pubDate><guid>https://blog.sxz799.xyz/posts/%E6%8A%80%E5%B7%A7/2023-03-24-openwrt%E5%8E%BB%E9%99%A4%E5%B0%8F%E7%B1%B3%E7%94%B5%E8%A7%86%E5%B9%BF%E5%91%8A/</guid><description>&lt;p>小米电视去除开机广告及视频开头广告&lt;/p></description></item><item><title>Map底层原理学习笔记</title><link>https://blog.sxz799.xyz/posts/golang/2023-03-01-goang-map%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link><pubDate>Wed, 01 Mar 2023 16:01:19 +0800</pubDate><guid>https://blog.sxz799.xyz/posts/golang/2023-03-01-goang-map%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid><description>&lt;p>golang Map底层原理学习笔记&lt;/p>
&lt;p>
&lt;a href="https://github.com/WuPeiqi/go_course/blob/master/day06%20%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%EF%BC%9A%E6%8C%87%E9%92%88%E3%80%81%E5%88%87%E7%89%87%E3%80%81%E5%AD%97%E5%85%B8/%E7%AC%94%E8%AE%B0/day06%20%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.md" title="课程来源" rel="noopener external nofollow noreferrer" target="_blank" class=" exturl">
课程来源
&lt;i class="fa fa-external-link-alt">&lt;/i>
&lt;/a>&lt;/p></description></item><item><title>Golang切片扩容学习笔记</title><link>https://blog.sxz799.xyz/posts/golang/2023-02-28-golang%E5%88%87%E7%89%87%E6%89%A9%E5%AE%B9%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link><pubDate>Tue, 28 Feb 2023 14:04:04 +0800</pubDate><guid>https://blog.sxz799.xyz/posts/golang/2023-02-28-golang%E5%88%87%E7%89%87%E6%89%A9%E5%AE%B9%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid><description>&lt;p>在学习golang切片时看到说golang的扩容机制是小于1024时进行double,超过1024后每次增加1/4，但是自己尝试后并非如此，于是扒了下golang的源码研究一番。&lt;/p></description></item><item><title>Mysql索引</title><link>https://blog.sxz799.xyz/posts/mysql/2023-02-20-mysql%E7%B4%A2%E5%BC%95/</link><pubDate>Mon, 20 Feb 2023 16:30:19 +0800</pubDate><guid>https://blog.sxz799.xyz/posts/mysql/2023-02-20-mysql%E7%B4%A2%E5%BC%95/</guid><description>&lt;p>在关系数据库中，索引是一种单独的、物理的对数据库表中一列或多列的值进行排序的一种存储结构，它是某个表中一列或若干列值的集合和相应的指向表中物理标识这些值的数据页的逻辑指针清单。索引的作用相当于图书的目录，可以根据目录中的页码快速找到所需的内容。&lt;/p></description></item><item><title>使用hugo和next主题搭建静态博客</title><link>https://blog.sxz799.xyz/posts/blog/2023-02-20-%E4%BD%BF%E7%94%A8hugo%E5%92%8Cnext%E4%B8%BB%E9%A2%98%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/</link><pubDate>Mon, 20 Feb 2023 10:54:53 +0800</pubDate><guid>https://blog.sxz799.xyz/posts/blog/2023-02-20-%E4%BD%BF%E7%94%A8hugo%E5%92%8Cnext%E4%B8%BB%E9%A2%98%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/</guid><description>&lt;p>前两年一直在用hexo写博客，hexo构建需要node环境，且文章数量多了以后构建速度慢了许多，且部署起来比较复杂，所以改用hugo。&lt;/p></description></item><item><title>Redis基础</title><link>https://blog.sxz799.xyz/posts/redis/redis%E5%9F%BA%E7%A1%80/</link><pubDate>Sun, 19 Feb 2023 10:50:23 +0800</pubDate><guid>https://blog.sxz799.xyz/posts/redis/redis%E5%9F%BA%E7%A1%80/</guid><description>&lt;h1 id="redis常用数据结构">Redis常用数据结构
&lt;a class="header-anchor" href="#redis%e5%b8%b8%e7%94%a8%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84">&lt;/a>
&lt;/h1>&lt;p>字符串（String）、哈希(Hash)、列表（list）、集合（set）、有序集合（ZSET）。&lt;/p></description></item><item><title>Golang逃逸分析</title><link>https://blog.sxz799.xyz/posts/golang/2023-02-09-golang%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90/</link><pubDate>Thu, 09 Feb 2023 15:29:08 +0800</pubDate><guid>https://blog.sxz799.xyz/posts/golang/2023-02-09-golang%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90/</guid><description>&lt;h2 id="案例">案例
&lt;a class="header-anchor" href="#%e6%a1%88%e4%be%8b">&lt;/a>
&lt;/h2>&lt;p>先看一段C语言代码&lt;/p></description></item><item><title>Golang Select</title><link>https://blog.sxz799.xyz/posts/golang/2023-02-09-golang-select/</link><pubDate>Thu, 09 Feb 2023 11:29:08 +0800</pubDate><guid>https://blog.sxz799.xyz/posts/golang/2023-02-09-golang-select/</guid><description>&lt;h2 id="go-select用处">go select用处
&lt;a class="header-anchor" href="#go-select%e7%94%a8%e5%a4%84">&lt;/a>
&lt;/h2>&lt;p>select是一种go可以处理多个通道之间的机制，看起来和switch语句很相似，但是select其实和IO机制中的select一样，多路复用通道，随机选取一个进行执行，如果说通道(channel)实现了多个goroutine之前的同步或者通信，那么select则实现了多个通道(channel)的同步或者通信，并且select具有阻塞的特性。&lt;/p></description></item><item><title>GMP模型</title><link>https://blog.sxz799.xyz/posts/golang/2023-02-08-gmp%E6%A8%A1%E5%9E%8B/</link><pubDate>Wed, 08 Feb 2023 16:29:08 +0800</pubDate><guid>https://blog.sxz799.xyz/posts/golang/2023-02-08-gmp%E6%A8%A1%E5%9E%8B/</guid><description>&lt;h2 id="什么是gmp模型">什么是GMP模型？
&lt;a class="header-anchor" href="#%e4%bb%80%e4%b9%88%e6%98%afgmp%e6%a8%a1%e5%9e%8b">&lt;/a>
&lt;/h2>&lt;ul>
&lt;li>G：gorotine（协程）&lt;/li>
&lt;li>M：machine（内核线程）&lt;/li>
&lt;li>P：processor(调度器)&lt;/li>
&lt;/ul>
&lt;p>Go语言运行时，通过核心元素G，M，P 和 自己的调度器，实现了自己的并发线程模型。调度器通过对G，M，P的调度实现了两级线程模型中操作系统内核之外的调度任务。&lt;/p></description></item><item><title>面试题整理(Golang方向)</title><link>https://blog.sxz799.xyz/posts/golang/2023-02-06-golang%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/</link><pubDate>Mon, 06 Feb 2023 16:29:08 +0800</pubDate><guid>https://blog.sxz799.xyz/posts/golang/2023-02-06-golang%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/</guid><description>&lt;p>面试题整理(Golang方向)&lt;/p></description></item><item><title>BCM943602CS蓝牙修复记录</title><link>https://blog.sxz799.xyz/posts/hackintosh/2023-02-02-bcm943602cs%E8%93%9D%E7%89%99%E4%BF%AE%E5%A4%8D%E8%AE%B0%E5%BD%95/</link><pubDate>Thu, 02 Feb 2023 09:02:29 +0800</pubDate><guid>https://blog.sxz799.xyz/posts/hackintosh/2023-02-02-bcm943602cs%E8%93%9D%E7%89%99%E4%BF%AE%E5%A4%8D%E8%AE%B0%E5%BD%95/</guid><description>&lt;h2 id="前言">前言
&lt;a class="header-anchor" href="#%e5%89%8d%e8%a8%80">&lt;/a>
&lt;/h2>&lt;p>记得在两年前做过一个b85+i5-4950的黑苹果配置，当时是在闲鱼购买的bcm943602cs三天线的无线网卡，安装系统的时候就可以直接免驱，进系统后蓝牙和wifi都是直接免驱，感觉这个卡还挺好的&lt;/p></description></item><item><title>让Gin-Vue-Admin的表单支持图片</title><link>https://blog.sxz799.xyz/posts/golang/2023-01-10-%E8%AE%A9gin-vue-admin%E7%9A%84%E8%A1%A8%E5%8D%95%E6%94%AF%E6%8C%81%E5%9B%BE%E7%89%87/</link><pubDate>Tue, 10 Jan 2023 15:31:07 +0000</pubDate><guid>https://blog.sxz799.xyz/posts/golang/2023-01-10-%E8%AE%A9gin-vue-admin%E7%9A%84%E8%A1%A8%E5%8D%95%E6%94%AF%E6%8C%81%E5%9B%BE%E7%89%87/</guid><description>&lt;p>在学习
&lt;a href="https://www.gin-vue-admin.com/" title="gin-vue-admin" rel="noopener external nofollow noreferrer" target="_blank" class=" exturl">
gin-vue-admin
&lt;i class="fa fa-external-link-alt">&lt;/i>
&lt;/a>时发现生成代码时并不支持选择表单输入类型，都是默认的输入框或者下拉框，这样在传图片或附件是就需要手动修改前端来实现此功能。&lt;/p></description></item><item><title>让Gin-Vue-Admin的字典值支持字符串</title><link>https://blog.sxz799.xyz/posts/golang/2023-01-09-%E8%AE%A9gin-vue-admin%E7%9A%84%E5%AD%97%E5%85%B8%E5%80%BC%E6%94%AF%E6%8C%81%E5%AD%97%E7%AC%A6%E4%B8%B2/</link><pubDate>Mon, 09 Jan 2023 19:29:57 +0000</pubDate><guid>https://blog.sxz799.xyz/posts/golang/2023-01-09-%E8%AE%A9gin-vue-admin%E7%9A%84%E5%AD%97%E5%85%B8%E5%80%BC%E6%94%AF%E6%8C%81%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid><description>&lt;p>最近在学习
&lt;a href="https://www.gin-vue-admin.com/" title="gin-vue-admin" rel="noopener external nofollow noreferrer" target="_blank" class=" exturl">
gin-vue-admin
&lt;i class="fa fa-external-link-alt">&lt;/i>
&lt;/a>开发平台，发现在配置字典时，字典值只能使用int，不能使用string，这样就会导致后期做报表开发时，查看数据库内容时容易摸不到头脑，所以准备改一下源码，使其字典值支持string！&lt;/p></description></item><item><title>在Mac OS系统下永久试用软件</title><link>https://blog.sxz799.xyz/posts/hackintosh/2023-01-05-%E5%9C%A8macos%E7%B3%BB%E7%BB%9F%E4%B8%8B%E6%B0%B8%E4%B9%85%E8%AF%95%E7%94%A8%E8%BD%AF%E4%BB%B6/</link><pubDate>Thu, 05 Jan 2023 21:46:21 +0000</pubDate><guid>https://blog.sxz799.xyz/posts/hackintosh/2023-01-05-%E5%9C%A8macos%E7%B3%BB%E7%BB%9F%E4%B8%8B%E6%B0%B8%E4%B9%85%E8%AF%95%E7%94%A8%E8%BD%AF%E4%BB%B6/</guid><description>&lt;h2 id="试用原理">试用原理
&lt;a class="header-anchor" href="#%e8%af%95%e7%94%a8%e5%8e%9f%e7%90%86">&lt;/a>
&lt;/h2>&lt;p>部分软件每次启动后会先检查注册信息，只需要在系统启动后删除注册信息就可以永久免费试用！&lt;/p></description></item><item><title>Golang中函数返回值注意点</title><link>https://blog.sxz799.xyz/posts/golang/2022-12-09-golang%E4%B8%AD%E5%87%BD%E6%95%B0%E8%BF%94%E5%9B%9E%E5%80%BC%E6%B3%A8%E6%84%8F%E7%82%B9/</link><pubDate>Fri, 09 Dec 2022 16:20:32 +0000</pubDate><guid>https://blog.sxz799.xyz/posts/golang/2022-12-09-golang%E4%B8%AD%E5%87%BD%E6%95%B0%E8%BF%94%E5%9B%9E%E5%80%BC%E6%B3%A8%E6%84%8F%E7%82%B9/</guid><description>&lt;p>Go语言函数返回值又两种方法，如下代码：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#c9d1d9;background-color:#0d1117;-moz-tab-size:1;-o-tab-size:1;tab-size:1;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff7b72">func&lt;/span> &lt;span style="color:#d2a8ff;font-weight:bold">GoReturn1&lt;/span>() &lt;span style="color:#ff7b72">int&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> a &lt;span style="color:#ff7b72;font-weight:bold">:=&lt;/span> &lt;span style="color:#a5d6ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff7b72">return&lt;/span> a
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff7b72">func&lt;/span> &lt;span style="color:#d2a8ff;font-weight:bold">GoReturn2&lt;/span>() (a &lt;span style="color:#ff7b72">int&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> a = &lt;span style="color:#a5d6ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff7b72">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff7b72">func&lt;/span> &lt;span style="color:#d2a8ff;font-weight:bold">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fmt.&lt;span style="color:#d2a8ff;font-weight:bold">Println&lt;/span>(&lt;span style="color:#a5d6ff">&amp;#34;返回值1：&amp;#34;&lt;/span>, &lt;span style="color:#d2a8ff;font-weight:bold">GoReturn1&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fmt.&lt;span style="color:#d2a8ff;font-weight:bold">Println&lt;/span>(&lt;span style="color:#a5d6ff">&amp;#34;返回值2：&amp;#34;&lt;/span>, &lt;span style="color:#d2a8ff;font-weight:bold">GoReturn2&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Golang泛型学习笔记</title><link>https://blog.sxz799.xyz/posts/golang/2022-12-09-golang%E6%B3%9B%E5%9E%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link><pubDate>Fri, 09 Dec 2022 10:49:28 +0000</pubDate><guid>https://blog.sxz799.xyz/posts/golang/2022-12-09-golang%E6%B3%9B%E5%9E%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid><description>&lt;h2 id="什么是泛型">什么是泛型？
&lt;a class="header-anchor" href="#%e4%bb%80%e4%b9%88%e6%98%af%e6%b3%9b%e5%9e%8b">&lt;/a>
&lt;/h2>&lt;p>泛型程序设计（generic programming）是程序设计语言的一种风格或范式。泛型允许程序员在强类型程序设计语言中编写代码时使用一些以后才指定的类型，在实例化时作为参数指明这些类型。&lt;/p></description></item><item><title>Python自动化-Selenium基操</title><link>https://blog.sxz799.xyz/posts/python/2022-10-18-python%E8%87%AA%E5%8A%A8%E5%8C%96-selenium%E5%9F%BA%E6%93%8D/</link><pubDate>Tue, 18 Oct 2022 17:13:11 +0000</pubDate><guid>https://blog.sxz799.xyz/posts/python/2022-10-18-python%E8%87%AA%E5%8A%A8%E5%8C%96-selenium%E5%9F%BA%E6%93%8D/</guid><description>&lt;p>最近有一个新的需求要在集团的一个内部系统中根据条件获取获取Excel数据并导入另外一个系统，要用到一些自动化相关内容，所以记录一下。&lt;/p></description></item><item><title>antdesignvue在iPhone手机上传文件时选择文件</title><link>https://blog.sxz799.xyz/posts/%E6%8A%80%E5%B7%A7/2022-10-10-antdesignvue%E5%9C%A8iphone%E6%89%8B%E6%9C%BA%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E6%97%B6%E9%80%89%E6%8B%A9%E6%96%87%E4%BB%B6/</link><pubDate>Mon, 10 Oct 2022 23:54:47 +0000</pubDate><guid>https://blog.sxz799.xyz/posts/%E6%8A%80%E5%B7%A7/2022-10-10-antdesignvue%E5%9C%A8iphone%E6%89%8B%E6%9C%BA%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E6%97%B6%E9%80%89%E6%8B%A9%E6%96%87%E4%BB%B6/</guid><description>&lt;p>还是这个项目
&lt;a href="https://github.com/sxz799/PublicFile-Server" title="PublicFile-Server" rel="noopener external nofollow noreferrer" target="_blank" class=" exturl">
PublicFile-Server
&lt;i class="fa fa-external-link-alt">&lt;/i>
&lt;/a>的前端相关内容。&lt;/p>
&lt;p>突然发现在iPhone上级上传文件的时候直接打开了相机，而在安卓手机上就可以选择相机或者文件。&lt;/p>
&lt;p>搜索后发现只需要添加&lt;code>:capture=&amp;quot;null&amp;quot;&lt;/code>即可。
代码如下：&lt;/p></description></item><item><title>Gin+Vue前后端分离整合部署，不再需要nginx服务器</title><link>https://blog.sxz799.xyz/posts/%E6%8A%80%E5%B7%A7/2022-09-26-gin-vue%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E6%95%B4%E5%90%88%E9%83%A8%E7%BD%B2%E4%B8%8D%E5%86%8D%E9%9C%80%E8%A6%81nginx%E6%9C%8D%E5%8A%A1%E5%99%A8/</link><pubDate>Mon, 26 Sep 2022 19:46:33 +0000</pubDate><guid>https://blog.sxz799.xyz/posts/%E6%8A%80%E5%B7%A7/2022-09-26-gin-vue%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E6%95%B4%E5%90%88%E9%83%A8%E7%BD%B2%E4%B8%8D%E5%86%8D%E9%9C%80%E8%A6%81nginx%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid><description>&lt;h2 id="前言">前言
&lt;a class="header-anchor" href="#%e5%89%8d%e8%a8%80">&lt;/a>
&lt;/h2>&lt;p>最近在学前端，写了两个很小的项目
&lt;a href="https://github.com/sxz799/PublicFile-Server" title="PublicFile-Server" rel="noopener external nofollow noreferrer" target="_blank" class=" exturl">
PublicFile-Server
&lt;i class="fa fa-external-link-alt">&lt;/i>
&lt;/a>、
&lt;a href="https://github.com/sxz799/PublicClipboard-Server-NoDB" title="PublicClipboard-Server-NoDB" rel="noopener external nofollow noreferrer" target="_blank" class=" exturl">
PublicClipboard-Server-NoDB
&lt;i class="fa fa-external-link-alt">&lt;/i>
&lt;/a>&lt;/p></description></item><item><title>常用sql语句记录</title><link>https://blog.sxz799.xyz/posts/%E6%8A%80%E5%B7%A7/2022-09-22-%E5%B8%B8%E7%94%A8sql%E8%AF%AD%E5%8F%A5%E8%AE%B0%E5%BD%95/</link><pubDate>Thu, 22 Sep 2022 22:11:09 +0000</pubDate><guid>https://blog.sxz799.xyz/posts/%E6%8A%80%E5%B7%A7/2022-09-22-%E5%B8%B8%E7%94%A8sql%E8%AF%AD%E5%8F%A5%E8%AE%B0%E5%BD%95/</guid><description>批量修改A表中数据在B表中的映射数据 UPDATE tableA a LEFT JOIN tableB b on a.Aid=b.Bid set a.codeA=b.codeB 在oracle中语句如下 UPDATE tableA SET tableA.codeA = ( SELECT tableB.codeB FROM tableB WHERE tableA.Aid = tableB.Bid );</description></item><item><title>Go语言实现RPC跨平台服务</title><link>https://blog.sxz799.xyz/posts/golang%E5%9F%BA%E7%A1%80/2022-09-03-%E8%BD%ACgo%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0rpc%E8%B7%A8%E5%B9%B3%E5%8F%B0%E6%9C%8D%E5%8A%A1/</link><pubDate>Sat, 03 Sep 2022 20:08:11 +0000</pubDate><guid>https://blog.sxz799.xyz/posts/golang%E5%9F%BA%E7%A1%80/2022-09-03-%E8%BD%ACgo%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0rpc%E8%B7%A8%E5%B9%B3%E5%8F%B0%E6%9C%8D%E5%8A%A1/</guid><description>&lt;h3 id="什么是rpc-服务">什么是RPC 服务
&lt;a class="header-anchor" href="#%e4%bb%80%e4%b9%88%e6%98%afrpc-%e6%9c%8d%e5%8a%a1">&lt;/a>
&lt;/h3>&lt;p>RPC，也就是&lt;strong>远程过程调用&lt;/strong>，是分布式系统中不同节点调用的方式（进程间通信），属于 C/S 模式。RPC 由客户端发起，调用服务端的方法进行通信，然后服务端把结果返回给客户端。&lt;/p>
&lt;p>RPC的核心有两个：&lt;strong>通信协议&lt;/strong>和&lt;strong>序列化&lt;/strong>。在 HTTP 2 之前，一般采用自定义 TCP 协议的方式进行通信，HTTP 2 出来后，也有采用该协议的，比如流行的gRPC。&lt;/p>
&lt;p>序列化和反序列化是&lt;strong>一种把传输内容编码和解码&lt;/strong>的方式，常见的编解码方式有 JSON、Protobuf 等。&lt;/p></description></item><item><title>Go语言RESTfulAPI服务</title><link>https://blog.sxz799.xyz/posts/golang%E5%9F%BA%E7%A1%80/2022-09-03-%E8%BD%ACgo%E8%AF%AD%E8%A8%80restful-api-%E6%9C%8D%E5%8A%A1/</link><pubDate>Sat, 03 Sep 2022 15:28:43 +0000</pubDate><guid>https://blog.sxz799.xyz/posts/golang%E5%9F%BA%E7%A1%80/2022-09-03-%E8%BD%ACgo%E8%AF%AD%E8%A8%80restful-api-%E6%9C%8D%E5%8A%A1/</guid><description>&lt;p>使用G语言编写 RESTful API 和 RPC 服务。在实际开发项目中，编写的这些服务可以被其他服务使用，这样就组成了微服务的架构；也可以被前端调用，这样就可以前后端分离。&lt;/p></description></item><item><title>oh-my-zsh安装配置记录</title><link>https://blog.sxz799.xyz/posts/%E6%8A%80%E5%B7%A7/2022-09-01-oh-my-zsh%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E8%AE%B0%E5%BD%95/</link><pubDate>Thu, 01 Sep 2022 22:13:20 +0000</pubDate><guid>https://blog.sxz799.xyz/posts/%E6%8A%80%E5%B7%A7/2022-09-01-oh-my-zsh%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E8%AE%B0%E5%BD%95/</guid><description>&lt;p>Oh My Zsh is a delightful, open source, community-driven framework for managing your Zsh configuration. It comes bundled with thousands of helpful functions, helpers, plugins, themes, and a few things that make you shout&amp;hellip;&lt;/p>
&lt;p>&amp;ldquo;Oh My ZSH!&amp;rdquo;&lt;/p></description></item><item><title>Go语言模块化管理与协作开发</title><link>https://blog.sxz799.xyz/posts/golang%E5%9F%BA%E7%A1%80/2022-09-01-%E8%BD%ACgo%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9D%97%E5%8C%96%E7%AE%A1%E7%90%86%E4%B8%8E%E5%8D%8F%E4%BD%9C%E5%BC%80%E5%8F%91/</link><pubDate>Thu, 01 Sep 2022 21:55:07 +0000</pubDate><guid>https://blog.sxz799.xyz/posts/golang%E5%9F%BA%E7%A1%80/2022-09-01-%E8%BD%ACgo%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9D%97%E5%8C%96%E7%AE%A1%E7%90%86%E4%B8%8E%E5%8D%8F%E4%BD%9C%E5%BC%80%E5%8F%91/</guid><description>&lt;p>任何业务，都是从简单向复杂演进的。而在业务演进的过程中，技术是从单体向多模块、多服务演进的。技术的这种演进方式的核心目的是复用代码、提高效率。&lt;/p></description></item><item><title>Go语言代码检查和优化</title><link>https://blog.sxz799.xyz/posts/golang%E5%9F%BA%E7%A1%80/2022-08-30-%E8%BD%ACgo%E8%AF%AD%E8%A8%80%E4%BB%A3%E7%A0%81%E6%A3%80%E6%9F%A5%E5%92%8C%E4%BC%98%E5%8C%96/</link><pubDate>Tue, 30 Aug 2022 20:40:16 +0000</pubDate><guid>https://blog.sxz799.xyz/posts/golang%E5%9F%BA%E7%A1%80/2022-08-30-%E8%BD%ACgo%E8%AF%AD%E8%A8%80%E4%BB%A3%E7%A0%81%E6%A3%80%E6%9F%A5%E5%92%8C%E4%BC%98%E5%8C%96/</guid><description>&lt;h2 id="代码规范检查">代码规范检查
&lt;a class="header-anchor" href="#%e4%bb%a3%e7%a0%81%e8%a7%84%e8%8c%83%e6%a3%80%e6%9f%a5">&lt;/a>
&lt;/h2>&lt;h3 id="什么是代码规范检查">什么是代码规范检查
&lt;a class="header-anchor" href="#%e4%bb%80%e4%b9%88%e6%98%af%e4%bb%a3%e7%a0%81%e8%a7%84%e8%8c%83%e6%a3%80%e6%9f%a5">&lt;/a>
&lt;/h3>&lt;p>代码规范检查，顾名思义，是从 Go 语言层面出发，依据 Go 语言的规范，对你写的代码进行的&lt;strong>静态扫描检查&lt;/strong>，这种检查和你的业务无关。&lt;/p>
&lt;p>比如你定义了个常量，从未使用过，虽然对代码运行并没有造成什么影响，但是这个常量是可以删除的，代码如下所示：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#c9d1d9;background-color:#0d1117;-moz-tab-size:1;-o-tab-size:1;tab-size:1;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff7b72">const&lt;/span> name = &lt;span style="color:#a5d6ff">&amp;#34;Golang&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff7b72">func&lt;/span> &lt;span style="color:#d2a8ff;font-weight:bold">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Go语言单元测试</title><link>https://blog.sxz799.xyz/posts/golang%E5%9F%BA%E7%A1%80/2022-08-29-%E8%BD%ACgo%E8%AF%AD%E8%A8%80%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</link><pubDate>Mon, 29 Aug 2022 20:56:10 +0000</pubDate><guid>https://blog.sxz799.xyz/posts/golang%E5%9F%BA%E7%A1%80/2022-08-29-%E8%BD%ACgo%E8%AF%AD%E8%A8%80%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</guid><description>&lt;h2 id="单元测试">单元测试
&lt;a class="header-anchor" href="#%e5%8d%95%e5%85%83%e6%b5%8b%e8%af%95">&lt;/a>
&lt;/h2>&lt;h3 id="什么是单元测试">什么是单元测试
&lt;a class="header-anchor" href="#%e4%bb%80%e4%b9%88%e6%98%af%e5%8d%95%e5%85%83%e6%b5%8b%e8%af%95">&lt;/a>
&lt;/h3>&lt;p>顾名思义，单元测试强调的是对单元进行测试。在开发中，一个单元可以是&lt;strong>一个函数&lt;/strong>、&lt;strong>一个模块&lt;/strong>等。一般情况下，你要测试的单元应该是一个完整的&lt;strong>最小单元&lt;/strong>，比如 Go 语言的函数。这样的话，当每个最小单元都被验证通过，那么整个模块、甚至整个程序就都可以被验证通过。
单元测试由开发者自己编写，也就是谁改动了代码，谁就要编写相应的单元测试代码以验证本次改动的正确性。&lt;/p></description></item><item><title>Go语言中的Slice</title><link>https://blog.sxz799.xyz/posts/golang%E5%9F%BA%E7%A1%80/2022-08-29-%E8%BD%ACgo%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84slice/</link><pubDate>Mon, 29 Aug 2022 09:50:33 +0000</pubDate><guid>https://blog.sxz799.xyz/posts/golang%E5%9F%BA%E7%A1%80/2022-08-29-%E8%BD%ACgo%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84slice/</guid><description>&lt;h3 id="数组">数组
&lt;a class="header-anchor" href="#%e6%95%b0%e7%bb%84">&lt;/a>
&lt;/h3>&lt;p>几乎所有的编程语言里都存在数组，Go 也不例外。那么为什么 Go 语言除了数组之外又设计了 slice 呢？要想解答这个问题，先来了解数组的局限性。&lt;/p>
&lt;p>在下面的示例中，a1、a2 是两个定义好的数组，但是它们的类型不一样。变量 a1 的类型是 [1]string，变量 a2 的类型是 [2]string，也就是说数组的大小属于数组类型的一部分，只有数组内部元素类型和大小一致时，这两个数组才是同一类型。&lt;/p></description></item><item><title>Go语言又爱又恨的unsafe</title><link>https://blog.sxz799.xyz/posts/golang%E5%9F%BA%E7%A1%80/2022-08-28-%E8%BD%ACgo%E8%AF%AD%E8%A8%80%E5%8F%88%E7%88%B1%E5%8F%88%E6%81%A8%E7%9A%84unsafe/</link><pubDate>Sun, 28 Aug 2022 22:04:55 +0000</pubDate><guid>https://blog.sxz799.xyz/posts/golang%E5%9F%BA%E7%A1%80/2022-08-28-%E8%BD%ACgo%E8%AF%AD%E8%A8%80%E5%8F%88%E7%88%B1%E5%8F%88%E6%81%A8%E7%9A%84unsafe/</guid><description>&lt;p>顾名思义，unsafe 是不安全的。Go 将其定义为这个包名，也是为了让我们尽可能地不使用它。不过虽然不安全，它也有优势，那就是可以绕过 Go 的内存安全机制，直接对内存进行读写。所以有时候出于性能需要，还是会冒险使用它来对内存进行操作。&lt;/p></description></item><item><title>Go语言字符串和结构体之间转换</title><link>https://blog.sxz799.xyz/posts/golang%E5%9F%BA%E7%A1%80/2022-08-27-%E8%BD%ACgo%E8%AF%AD%E8%A8%80%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E7%BB%93%E6%9E%84%E4%BD%93%E4%B9%8B%E9%97%B4%E8%BD%AC%E6%8D%A2/</link><pubDate>Sat, 27 Aug 2022 22:58:07 +0000</pubDate><guid>https://blog.sxz799.xyz/posts/golang%E5%9F%BA%E7%A1%80/2022-08-27-%E8%BD%ACgo%E8%AF%AD%E8%A8%80%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E7%BB%93%E6%9E%84%E4%BD%93%E4%B9%8B%E9%97%B4%E8%BD%AC%E6%8D%A2/</guid><description>&lt;p>在web应用调用 API 的时候，需要把 API 返回的 JSON 字符串转换为 struct 结构体，便于操作。那么一个 JSON 字符串是如何转换为 struct 结构体的呢？这就需要用到反射的知识，今天学习基于字符串和结构体之间的转换，一步步地揭开 Go 语言运行时反射的面纱。&lt;/p></description></item><item><title>Go语言中make和new的区别</title><link>https://blog.sxz799.xyz/posts/golang%E5%9F%BA%E7%A1%80/2022-08-26-%E8%BD%ACgo%E8%AF%AD%E8%A8%80%E4%B8%ADmake%E5%92%8Cnew%E7%9A%84%E5%8C%BA%E5%88%AB/</link><pubDate>Fri, 26 Aug 2022 13:55:59 +0000</pubDate><guid>https://blog.sxz799.xyz/posts/golang%E5%9F%BA%E7%A1%80/2022-08-26-%E8%BD%ACgo%E8%AF%AD%E8%A8%80%E4%B8%ADmake%E5%92%8Cnew%E7%9A%84%E5%8C%BA%E5%88%AB/</guid><description>&lt;p>程序的运行都需要内存，比如像变量的创建、函数的调用、数据的计算等。所以在需要内存的时候就要申请内存，进行内存分配。在 C/C++ 这类语言中，内存是由开发者自己管理的，需要主动申请和释放，而在 Go 语言中则是由该语言自己管理的，开发者不用做太多干涉，只需要声明变量，Go 语言就会根据变量的类型自动分配相应的内存。&lt;/p></description></item><item><title>Go语言值,引用,指针之间的区别</title><link>https://blog.sxz799.xyz/posts/golang%E5%9F%BA%E7%A1%80/2022-08-25-%E8%BD%ACgo%E8%AF%AD%E8%A8%80%E5%80%BC%E5%BC%95%E7%94%A8%E6%8C%87%E9%92%88%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB/</link><pubDate>Thu, 25 Aug 2022 21:45:06 +0000</pubDate><guid>https://blog.sxz799.xyz/posts/golang%E5%9F%BA%E7%A1%80/2022-08-25-%E8%BD%ACgo%E8%AF%AD%E8%A8%80%E5%80%BC%E5%BC%95%E7%94%A8%E6%8C%87%E9%92%88%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB/</guid><description>&lt;h2 id="前言">前言
&lt;a class="header-anchor" href="#%e5%89%8d%e8%a8%80">&lt;/a>
&lt;/h2>&lt;p>先看一段代码&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#c9d1d9;background-color:#0d1117;-moz-tab-size:1;-o-tab-size:1;tab-size:1;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff7b72">type&lt;/span> address &lt;span style="color:#ff7b72">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> province &lt;span style="color:#ff7b72">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> city &lt;span style="color:#ff7b72">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff7b72">func&lt;/span> (addr address) &lt;span style="color:#d2a8ff;font-weight:bold">String&lt;/span>() &lt;span style="color:#ff7b72">string&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff7b72">return&lt;/span> fmt.&lt;span style="color:#d2a8ff;font-weight:bold">Sprintf&lt;/span>(&lt;span style="color:#a5d6ff">&amp;#34;the addr is %s%s&amp;#34;&lt;/span>, addr.province, addr.city)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff7b72">func&lt;/span> &lt;span style="color:#d2a8ff;font-weight:bold">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> add &lt;span style="color:#ff7b72;font-weight:bold">:=&lt;/span> address{province: &lt;span style="color:#a5d6ff">&amp;#34;山东省&amp;#34;&lt;/span>, city: &lt;span style="color:#a5d6ff">&amp;#34;济南市&amp;#34;&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d2a8ff;font-weight:bold">printString&lt;/span>(add)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d2a8ff;font-weight:bold">printString&lt;/span>(&lt;span style="color:#ff7b72;font-weight:bold">&amp;amp;&lt;/span>add)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff7b72">func&lt;/span> &lt;span style="color:#d2a8ff;font-weight:bold">printString&lt;/span>(s fmt.Stringer) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fmt.&lt;span style="color:#d2a8ff;font-weight:bold">Println&lt;/span>(s.&lt;span style="color:#d2a8ff;font-weight:bold">String&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f85149">运行结果：&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>the addr is &lt;span style="color:#f85149">山东省济南市&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>the addr is &lt;span style="color:#f85149">山东省济南市&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Go语言指针学习</title><link>https://blog.sxz799.xyz/posts/golang%E5%9F%BA%E7%A1%80/2022-08-24-%E8%BD%ACgo%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88%E5%AD%A6%E4%B9%A0/</link><pubDate>Wed, 24 Aug 2022 21:28:24 +0000</pubDate><guid>https://blog.sxz799.xyz/posts/golang%E5%9F%BA%E7%A1%80/2022-08-24-%E8%BD%ACgo%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88%E5%AD%A6%E4%B9%A0/</guid><description>&lt;h2 id="什么是指针">什么是指针
&lt;a class="header-anchor" href="#%e4%bb%80%e4%b9%88%e6%98%af%e6%8c%87%e9%92%88">&lt;/a>
&lt;/h2>&lt;p>程序运行时的数据是存放在内存中的，而内存会被抽象为一系列具有连续编号的存储空间，那么每一个存储在内存中的数据都会有一个编号，这个编号就是内存地址。有了这个内存地址就可以找到这个内存中存储的数据，而内存地址可以被赋值给一个指针。&lt;/p></description></item><item><title>Go语言常见的高效并发模式</title><link>https://blog.sxz799.xyz/posts/golang%E5%9F%BA%E7%A1%80/2022-08-18-%E8%BD%ACgo%E8%AF%AD%E8%A8%80%E5%B8%B8%E8%A7%81%E7%9A%84%E9%AB%98%E6%95%88%E5%B9%B6%E5%8F%91%E6%A8%A1%E5%BC%8F/</link><pubDate>Thu, 18 Aug 2022 10:16:25 +0000</pubDate><guid>https://blog.sxz799.xyz/posts/golang%E5%9F%BA%E7%A1%80/2022-08-18-%E8%BD%ACgo%E8%AF%AD%E8%A8%80%E5%B8%B8%E8%A7%81%E7%9A%84%E9%AB%98%E6%95%88%E5%B9%B6%E5%8F%91%E6%A8%A1%E5%BC%8F/</guid><description>&lt;p>如何用 goroutine、channel、sync包 这些基础元素组成并发模式，更好地编写并发程序。&lt;/p></description></item><item><title>Go语言Context学习笔记</title><link>https://blog.sxz799.xyz/posts/golang%E5%9F%BA%E7%A1%80/2022-08-16-%E8%BD%ACgo%E8%AF%AD%E8%A8%80context%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link><pubDate>Tue, 16 Aug 2022 16:16:07 +0000</pubDate><guid>https://blog.sxz799.xyz/posts/golang%E5%9F%BA%E7%A1%80/2022-08-16-%E8%BD%ACgo%E8%AF%AD%E8%A8%80context%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid><description>&lt;h3 id="前言">前言
&lt;a class="header-anchor" href="#%e5%89%8d%e8%a8%80">&lt;/a>
&lt;/h3>&lt;p>之前学习了怎么在所有的协程运行结束后让程序停止。这次学一下怎么让运行中的协程停止。比如我们开了1个协程去监控一个程序，如果我们手动取消监控就要让协程主动停止任务，该怎么实现呢？用 select+channel 做检测！&lt;/p></description></item><item><title>Go语言中使用sync包控制并发</title><link>https://blog.sxz799.xyz/posts/golang%E5%9F%BA%E7%A1%80/2022-08-15-%E8%BD%ACgo%E8%AF%AD%E8%A8%80%E4%B8%AD%E4%BD%BF%E7%94%A8sync%E5%8C%85%E6%8E%A7%E5%88%B6%E5%B9%B6%E5%8F%91/</link><pubDate>Mon, 15 Aug 2022 20:41:12 +0000</pubDate><guid>https://blog.sxz799.xyz/posts/golang%E5%9F%BA%E7%A1%80/2022-08-15-%E8%BD%ACgo%E8%AF%AD%E8%A8%80%E4%B8%AD%E4%BD%BF%E7%94%A8sync%E5%8C%85%E6%8E%A7%E5%88%B6%E5%B9%B6%E5%8F%91/</guid><description>&lt;h3 id="syncmutex-和-syncrwmutex">sync.Mutex 和 sync.RWMutex
&lt;a class="header-anchor" href="#syncmutex-%e5%92%8c-syncrwmutex">&lt;/a>
&lt;/h3>&lt;p>如果同一块内存被多个 goroutine 同时访问，就会产生不知道谁先访问也无法预料最后结果的情况。这就是资源竞争，这块内存可以称为共享的资源。例如下面的代码&lt;/p></description></item><item><title>Go语言使用channel进行goroutine通信</title><link>https://blog.sxz799.xyz/posts/golang%E5%9F%BA%E7%A1%80/2022-08-15-%E8%BD%ACgo%E8%AF%AD%E8%A8%80%E4%BD%BF%E7%94%A8channel%E8%BF%9B%E8%A1%8Cgoroutine%E9%80%9A%E4%BF%A1/</link><pubDate>Mon, 15 Aug 2022 10:38:35 +0000</pubDate><guid>https://blog.sxz799.xyz/posts/golang%E5%9F%BA%E7%A1%80/2022-08-15-%E8%BD%ACgo%E8%AF%AD%E8%A8%80%E4%BD%BF%E7%94%A8channel%E8%BF%9B%E8%A1%8Cgoroutine%E9%80%9A%E4%BF%A1/</guid><description>&lt;h4 id="声明channel">声明channel
&lt;a class="header-anchor" href="#%e5%a3%b0%e6%98%8echannel">&lt;/a>
&lt;/h4>&lt;p>channel是go语言中的一种数据类型，也叫通道
声明方式&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#c9d1d9;background-color:#0d1117;-moz-tab-size:1;-o-tab-size:1;tab-size:1;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>ch&lt;span style="color:#ff7b72;font-weight:bold">:=&lt;/span>make(&lt;span style="color:#ff7b72">chan&lt;/span> &lt;span style="color:#ff7b72">string&lt;/span>, n)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>ch : channel的变量名&lt;/li>
&lt;li>chan : 声明channel的关键字&lt;/li>
&lt;li>string : channel中存储额数据类型&lt;/li>
&lt;li>n: 缓冲长度(不填时代表无缓冲)&lt;/li>
&lt;/ul></description></item><item><title>Go语言错误处理笔记</title><link>https://blog.sxz799.xyz/posts/golang%E5%9F%BA%E7%A1%80/2022-08-14-%E8%BD%ACgo%E8%AF%AD%E8%A8%80%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%E7%AC%94%E8%AE%B0/</link><pubDate>Sun, 14 Aug 2022 21:54:46 +0000</pubDate><guid>https://blog.sxz799.xyz/posts/golang%E5%9F%BA%E7%A1%80/2022-08-14-%E8%BD%ACgo%E8%AF%AD%E8%A8%80%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%E7%AC%94%E8%AE%B0/</guid><description>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#c9d1d9;background-color:#0d1117;-moz-tab-size:1;-o-tab-size:1;tab-size:1;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff7b72">type&lt;/span> &lt;span style="color:#ff7b72">error&lt;/span> &lt;span style="color:#ff7b72">interface&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d2a8ff;font-weight:bold">Error&lt;/span>() &lt;span style="color:#ff7b72">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Go语言接口学习笔记</title><link>https://blog.sxz799.xyz/posts/golang%E5%9F%BA%E7%A1%80/2022-08-14-%E8%BD%ACgo%E8%AF%AD%E8%A8%80%E6%8E%A5%E5%8F%A3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link><pubDate>Sun, 14 Aug 2022 19:32:34 +0000</pubDate><guid>https://blog.sxz799.xyz/posts/golang%E5%9F%BA%E7%A1%80/2022-08-14-%E8%BD%ACgo%E8%AF%AD%E8%A8%80%E6%8E%A5%E5%8F%A3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid><description>&lt;h3 id="一接口的定义">一、接口的定义
&lt;a class="header-anchor" href="#%e4%b8%80%e6%8e%a5%e5%8f%a3%e7%9a%84%e5%ae%9a%e4%b9%89">&lt;/a>
&lt;/h3>&lt;p>接口是和调用方的一种约定 是一个高度抽象的类型 不同和具体的实现细节绑定在一起&lt;/p></description></item><item><title>Go语言中函数和方法的区别</title><link>https://blog.sxz799.xyz/posts/golang%E5%9F%BA%E7%A1%80/2022-08-14-%E8%BD%ACgo%E8%AF%AD%E8%A8%80%E4%B8%AD%E5%87%BD%E6%95%B0%E5%92%8C%E6%96%B9%E6%B3%95%E7%9A%84%E5%8C%BA%E5%88%AB/</link><pubDate>Sun, 14 Aug 2022 16:26:28 +0000</pubDate><guid>https://blog.sxz799.xyz/posts/golang%E5%9F%BA%E7%A1%80/2022-08-14-%E8%BD%ACgo%E8%AF%AD%E8%A8%80%E4%B8%AD%E5%87%BD%E6%95%B0%E5%92%8C%E6%96%B9%E6%B3%95%E7%9A%84%E5%8C%BA%E5%88%AB/</guid><description>&lt;h2 id="一函数">一、函数
&lt;a class="header-anchor" href="#%e4%b8%80%e5%87%bd%e6%95%b0">&lt;/a>
&lt;/h2>&lt;h3 id="1举个">1.举个🌰
&lt;a class="header-anchor" href="#1%e4%b8%be%e4%b8%aa">&lt;/a>
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#c9d1d9;background-color:#0d1117;-moz-tab-size:1;-o-tab-size:1;tab-size:1;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff7b72">func&lt;/span> &lt;span style="color:#d2a8ff;font-weight:bold">sum&lt;/span>(a,b &lt;span style="color:#ff7b72">int&lt;/span>) &lt;span style="color:#ff7b72">int&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff7b72">return&lt;/span> a&lt;span style="color:#ff7b72;font-weight:bold">+&lt;/span>b
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>记录一个集合相关算法的实现代码</title><link>https://blog.sxz799.xyz/posts/%E6%8A%80%E5%B7%A7/2022-08-13-%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%AA%E9%9B%86%E5%90%88%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%BB%A3%E7%A0%81/</link><pubDate>Sat, 13 Aug 2022 19:45:46 +0000</pubDate><guid>https://blog.sxz799.xyz/posts/%E6%8A%80%E5%B7%A7/2022-08-13-%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%AA%E9%9B%86%E5%90%88%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%BB%A3%E7%A0%81/</guid><description>&lt;h3 id="算法说明">算法说明
&lt;a class="header-anchor" href="#%e7%ae%97%e6%b3%95%e8%af%b4%e6%98%8e">&lt;/a>
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#c9d1d9;background-color:#0d1117;-moz-tab-size:1;-o-tab-size:1;tab-size:1;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>讨论个算法
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>场景一
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>集合一：1、3 集合二：3、4、5
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>如何得到 集合 1、4、5
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>场景二
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>集合一：1、2、3 集合二：2、3、3、4、5
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>如何得到 集合 1、3、4、5
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>【转】理解MVCC机制</title><link>https://blog.sxz799.xyz/posts/mysql%E7%AC%94%E8%AE%B0/2022-05-11-%E7%90%86%E8%A7%A3mvcc%E6%9C%BA%E5%88%B6/</link><pubDate>Wed, 11 May 2022 16:33:42 +0000</pubDate><guid>https://blog.sxz799.xyz/posts/mysql%E7%AC%94%E8%AE%B0/2022-05-11-%E7%90%86%E8%A7%A3mvcc%E6%9C%BA%E5%88%B6/</guid><description>&lt;h3 id="理解mvcc机制的前奏undo-log版本链是个什么东西">理解MVCC机制的前奏：undo log版本链是个什么东西？
&lt;a class="header-anchor" href="#%e7%90%86%e8%a7%a3mvcc%e6%9c%ba%e5%88%b6%e7%9a%84%e5%89%8d%e5%a5%8fundo-log%e7%89%88%e6%9c%ac%e9%93%be%e6%98%af%e4%b8%aa%e4%bb%80%e4%b9%88%e4%b8%9c%e8%a5%bf">&lt;/a>
&lt;/h3>&lt;p>简单来说呢，我们每条数据其实都有两个隐藏字段，一个是trx_id，一个是roll_pointer，这个trx_id就是最近一次更新这条数据的事务id，roll_pointer就是指向你了你更新这个事务之前生成的undo log&lt;/p></description></item><item><title>【转】SQL标准中对事务的4个隔离级别</title><link>https://blog.sxz799.xyz/posts/mysql%E7%AC%94%E8%AE%B0/2022-05-11-sql%E6%A0%87%E5%87%86%E4%B8%AD%E5%AF%B9%E4%BA%8B%E5%8A%A1%E7%9A%844%E4%B8%AA%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/</link><pubDate>Wed, 11 May 2022 16:32:56 +0000</pubDate><guid>https://blog.sxz799.xyz/posts/mysql%E7%AC%94%E8%AE%B0/2022-05-11-sql%E6%A0%87%E5%87%86%E4%B8%AD%E5%AF%B9%E4%BA%8B%E5%8A%A1%E7%9A%844%E4%B8%AA%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/</guid><description>&lt;h3 id="sql标准中对事务的4个隔离级别">SQL标准中对事务的4个隔离级别
&lt;a class="header-anchor" href="#sql%e6%a0%87%e5%87%86%e4%b8%ad%e5%af%b9%e4%ba%8b%e5%8a%a1%e7%9a%844%e4%b8%aa%e9%9a%94%e7%a6%bb%e7%ba%a7%e5%88%ab">&lt;/a>
&lt;/h3>&lt;p>这4种级别包括了：&lt;/p></description></item><item><title>【转】什么是脏写、脏读、不可重复读和幻读？</title><link>https://blog.sxz799.xyz/posts/mysql%E7%AC%94%E8%AE%B0/2022-05-10-%E4%BB%80%E4%B9%88%E6%98%AF%E8%84%8F%E5%86%99%E8%84%8F%E8%AF%BB%E4%B8%8D%E5%8F%AF%E9%87%8D%E5%A4%8D%E8%AF%BB%E5%92%8C%E5%B9%BB%E8%AF%BB/</link><pubDate>Tue, 10 May 2022 14:28:52 +0000</pubDate><guid>https://blog.sxz799.xyz/posts/mysql%E7%AC%94%E8%AE%B0/2022-05-10-%E4%BB%80%E4%B9%88%E6%98%AF%E8%84%8F%E5%86%99%E8%84%8F%E8%AF%BB%E4%B8%8D%E5%8F%AF%E9%87%8D%E5%A4%8D%E8%AF%BB%E5%92%8C%E5%B9%BB%E8%AF%BB/</guid><description>&lt;h3 id="多个事务并发执行时候的另外两种问题一个是不可重复读一个是幻读">多个事务并发执行时候的另外两种问题：一个是不可重复读，一个是幻读
&lt;a class="header-anchor" href="#%e5%a4%9a%e4%b8%aa%e4%ba%8b%e5%8a%a1%e5%b9%b6%e5%8f%91%e6%89%a7%e8%a1%8c%e6%97%b6%e5%80%99%e7%9a%84%e5%8f%a6%e5%a4%96%e4%b8%a4%e7%a7%8d%e9%97%ae%e9%a2%98%e4%b8%80%e4%b8%aa%e6%98%af%e4%b8%8d%e5%8f%af%e9%87%8d%e5%a4%8d%e8%af%bb%e4%b8%80%e4%b8%aa%e6%98%af%e5%b9%bb%e8%af%bb">&lt;/a>
&lt;/h3>&lt;p>多个事务并发执行时候，对MySQL的缓存页里的同一行数据同时进行更新或者查询的时候，可能发生的&lt;strong>脏写和脏读&lt;/strong>的问题&lt;/p></description></item><item><title>【转】重新回顾redo日志对于事务提交后，数据绝对不会丢失的意义 1</title><link>https://blog.sxz799.xyz/posts/mysql%E7%AC%94%E8%AE%B0/2022-05-09-%E9%87%8D%E6%96%B0%E5%9B%9E%E9%A1%BEredo%E6%97%A5%E5%BF%97%E5%AF%B9%E4%BA%8E%E4%BA%8B%E5%8A%A1%E6%8F%90%E4%BA%A4%E5%90%8E%E6%95%B0%E6%8D%AE%E7%BB%9D%E5%AF%B9%E4%B8%8D%E4%BC%9A%E4%B8%A2%E5%A4%B1%E7%9A%84%E6%84%8F%E4%B9%89-1/</link><pubDate>Mon, 09 May 2022 16:44:55 +0000</pubDate><guid>https://blog.sxz799.xyz/posts/mysql%E7%AC%94%E8%AE%B0/2022-05-09-%E9%87%8D%E6%96%B0%E5%9B%9E%E9%A1%BEredo%E6%97%A5%E5%BF%97%E5%AF%B9%E4%BA%8E%E4%BA%8B%E5%8A%A1%E6%8F%90%E4%BA%A4%E5%90%8E%E6%95%B0%E6%8D%AE%E7%BB%9D%E5%AF%B9%E4%B8%8D%E4%BC%9A%E4%B8%A2%E5%A4%B1%E7%9A%84%E6%84%8F%E4%B9%89-1/</guid><description>&lt;p>在更新完Buffer Pool中的缓存页之后，必须要写一条redo log，这样才能记录下来我们对数据库做的修改。
redo log可以保证我们事务提交之后，如果事务中的增删改SQL语句更新的缓存页还没刷到磁盘上去，此时MySQL宕机了，那么MySQL重启过后，就可以把redo log重做一遍，恢复出来事务当时更新的缓存页，然后再把缓存页刷到磁盘就可以了&lt;/p></description></item><item><title>【转】重新回顾redo日志对于事务提交后，数据绝对不会丢失的意义 2</title><link>https://blog.sxz799.xyz/posts/mysql%E7%AC%94%E8%AE%B0/2022-05-09-%E9%87%8D%E6%96%B0%E5%9B%9E%E9%A1%BEredo%E6%97%A5%E5%BF%97%E5%AF%B9%E4%BA%8E%E4%BA%8B%E5%8A%A1%E6%8F%90%E4%BA%A4%E5%90%8E%E6%95%B0%E6%8D%AE%E7%BB%9D%E5%AF%B9%E4%B8%8D%E4%BC%9A%E4%B8%A2%E5%A4%B1%E7%9A%84%E6%84%8F%E4%B9%89-2/</link><pubDate>Mon, 09 May 2022 16:44:55 +0000</pubDate><guid>https://blog.sxz799.xyz/posts/mysql%E7%AC%94%E8%AE%B0/2022-05-09-%E9%87%8D%E6%96%B0%E5%9B%9E%E9%A1%BEredo%E6%97%A5%E5%BF%97%E5%AF%B9%E4%BA%8E%E4%BA%8B%E5%8A%A1%E6%8F%90%E4%BA%A4%E5%90%8E%E6%95%B0%E6%8D%AE%E7%BB%9D%E5%AF%B9%E4%B8%8D%E4%BC%9A%E4%B8%A2%E5%A4%B1%E7%9A%84%E6%84%8F%E4%B9%89-2/</guid><description>&lt;h3 id="如果事务执行到一半要回滚怎么办再探undo-log回滚日志原理">如果事务执行到一半要回滚怎么办？再探undo log回滚日志原理！
&lt;a class="header-anchor" href="#%e5%a6%82%e6%9e%9c%e4%ba%8b%e5%8a%a1%e6%89%a7%e8%a1%8c%e5%88%b0%e4%b8%80%e5%8d%8a%e8%a6%81%e5%9b%9e%e6%bb%9a%e6%80%8e%e4%b9%88%e5%8a%9e%e5%86%8d%e6%8e%a2undo-log%e5%9b%9e%e6%bb%9a%e6%97%a5%e5%bf%97%e5%8e%9f%e7%90%86">&lt;/a>
&lt;/h3>&lt;p>redo log都是先进入redo log buffer中的一个block，然后事务提交的时候就会刷入磁盘文件里去。&lt;/p>
&lt;p>这样万一要是你提交事务了，结果事务修改的缓存页还没来得及刷入磁盘上的数据文件，此时你MySQL关闭了或者是宕机了，那么buffer pool里被事务修改过的数据就全部都丢失了！&lt;/p></description></item><item><title>【转】如何解决经典的Too many connections故障？背后原理是什么</title><link>https://blog.sxz799.xyz/posts/mysql%E7%AC%94%E8%AE%B0/2022-05-09-%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E7%BB%8F%E5%85%B8%E7%9A%84too-many-connections%E6%95%85%E9%9A%9C%E8%83%8C%E5%90%8E%E5%8E%9F%E7%90%86%E6%98%AF%E4%BB%80%E4%B9%88/</link><pubDate>Mon, 09 May 2022 14:49:06 +0000</pubDate><guid>https://blog.sxz799.xyz/posts/mysql%E7%AC%94%E8%AE%B0/2022-05-09-%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E7%BB%8F%E5%85%B8%E7%9A%84too-many-connections%E6%95%85%E9%9A%9C%E8%83%8C%E5%90%8E%E5%8E%9F%E7%90%86%E6%98%AF%E4%BB%80%E4%B9%88/</guid><description>&lt;p>其实核心就是一行命令：&lt;/p></description></item><item><title>【转】一个真实的生产优化案例</title><link>https://blog.sxz799.xyz/posts/mysql%E7%AC%94%E8%AE%B0/2022-05-09-%E4%B8%80%E4%B8%AA%E7%9C%9F%E5%AE%9E%E7%9A%84%E7%94%9F%E4%BA%A7%E4%BC%98%E5%8C%96%E6%A1%88%E4%BE%8B/</link><pubDate>Mon, 09 May 2022 14:49:06 +0000</pubDate><guid>https://blog.sxz799.xyz/posts/mysql%E7%AC%94%E8%AE%B0/2022-05-09-%E4%B8%80%E4%B8%AA%E7%9C%9F%E5%AE%9E%E7%9A%84%E7%94%9F%E4%BA%A7%E4%BC%98%E5%8C%96%E6%A1%88%E4%BE%8B/</guid><description>&lt;h3 id="mysql数据库的日志顺序读写以及数据文件随机读写的原理">MySQL数据库的日志顺序读写以及数据文件随机读写的原理
&lt;a class="header-anchor" href="#mysql%e6%95%b0%e6%8d%ae%e5%ba%93%e7%9a%84%e6%97%a5%e5%bf%97%e9%a1%ba%e5%ba%8f%e8%af%bb%e5%86%99%e4%bb%a5%e5%8f%8a%e6%95%b0%e6%8d%ae%e6%96%87%e4%bb%b6%e9%9a%8f%e6%9c%ba%e8%af%bb%e5%86%99%e7%9a%84%e5%8e%9f%e7%90%86">&lt;/a>
&lt;/h3>&lt;p>先给大家剖析一下MySQL在实际工作时候的两种数据读写机制，一种是对redo log、binlog这种日志进行的磁盘顺序读写，一种是对表空间的磁盘文件里的数据页进行的磁盘随机读写。
简单来说，MySQL在工作的时候，尤其是执行增删改操作的时候，肯定会先从表空间的磁盘文件里读取数据页出来，这个过程其实就是典型的磁盘随机读操作&lt;/p></description></item><item><title>【转】MySQL物理数据模型2</title><link>https://blog.sxz799.xyz/posts/mysql%E7%AC%94%E8%AE%B0/2022-05-09-mysql%E7%89%A9%E7%90%86%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B2/</link><pubDate>Mon, 09 May 2022 13:38:15 +0000</pubDate><guid>https://blog.sxz799.xyz/posts/mysql%E7%AC%94%E8%AE%B0/2022-05-09-mysql%E7%89%A9%E7%90%86%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B2/</guid><description>&lt;h3 id="磁盘上的一行数据到底如何读取出来的">磁盘上的一行数据到底如何读取出来的？
&lt;a class="header-anchor" href="#%e7%a3%81%e7%9b%98%e4%b8%8a%e7%9a%84%e4%b8%80%e8%a1%8c%e6%95%b0%e6%8d%ae%e5%88%b0%e5%ba%95%e5%a6%82%e4%bd%95%e8%af%bb%e5%8f%96%e5%87%ba%e6%9d%a5%e7%9a%84">&lt;/a>
&lt;/h3>&lt;p>我们结合上面的磁盘上的数据存储格式来思考一下，一行数据到底是如何读取出来的呢？&lt;/p>
&lt;p>再看上面的磁盘数据存储格式：&lt;/p>
&lt;p>0x09 0x04 00000101 头信息 column1=value1 column2=value2 &amp;hellip; columnN=valueN&lt;/p>
&lt;p>首先他必然要把变长字段长度列表和NULL值列表读取出来，通过综合分析一下，就知道有几个变长字段，哪几个变长字段是NULL，因为NULL值列表里谁是NULL谁不是NULL都一清二楚。&lt;/p></description></item><item><title>【转】MySQL物理数据模型</title><link>https://blog.sxz799.xyz/posts/mysql%E7%AC%94%E8%AE%B0/2022-05-09-mysql%E7%89%A9%E7%90%86%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B1/</link><pubDate>Mon, 09 May 2022 10:25:56 +0000</pubDate><guid>https://blog.sxz799.xyz/posts/mysql%E7%AC%94%E8%AE%B0/2022-05-09-mysql%E7%89%A9%E7%90%86%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B1/</guid><description>&lt;h3 id="为什么不能直接更新磁盘上的数据">为什么不能直接更新磁盘上的数据？
&lt;a class="header-anchor" href="#%e4%b8%ba%e4%bb%80%e4%b9%88%e4%b8%8d%e8%83%bd%e7%9b%b4%e6%8e%a5%e6%9b%b4%e6%96%b0%e7%a3%81%e7%9b%98%e4%b8%8a%e7%9a%84%e6%95%b0%e6%8d%ae">&lt;/a>
&lt;/h3>&lt;p>因为来一个请求就直接对磁盘文件进行随机读写，然后更新磁盘文件里的数据，虽然技术上是可以做到的，但是那必然导致执行请求的性能极差。
因为磁盘随机读写的性能是最差的，所以直接更新磁盘文件，必然导致我们的数据库完全无法抗下任何一点点稍微高并发一点的场景。&lt;/p></description></item><item><title>【转】LRU算法优化和性能优化</title><link>https://blog.sxz799.xyz/posts/mysql%E7%AC%94%E8%AE%B0/2022-04-18-lru%E7%AE%97%E6%B3%95%E4%BC%98%E5%8C%96%E5%92%8C%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</link><pubDate>Mon, 18 Apr 2022 14:56:10 +0000</pubDate><guid>https://blog.sxz799.xyz/posts/mysql%E7%AC%94%E8%AE%B0/2022-04-18-lru%E7%AE%97%E6%B3%95%E4%BC%98%E5%8C%96%E5%92%8C%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</guid><description>&lt;h3 id="mysql的预读机制">MYSQL的预读机制
&lt;a class="header-anchor" href="#mysql%e7%9a%84%e9%a2%84%e8%af%bb%e6%9c%ba%e5%88%b6">&lt;/a>
&lt;/h3>&lt;p>MySQL设计了一个预读机制，要把相邻的一些数据页一次性读入到Buffer Pool缓存里去&lt;/p></description></item><item><title>【转】Buffer Pool的内存数据结构</title><link>https://blog.sxz799.xyz/posts/mysql%E7%AC%94%E8%AE%B0/2022-04-18-buffer-pool%E7%9A%84%E5%86%85%E5%AD%98%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link><pubDate>Mon, 18 Apr 2022 13:11:03 +0000</pubDate><guid>https://blog.sxz799.xyz/posts/mysql%E7%AC%94%E8%AE%B0/2022-04-18-buffer-pool%E7%9A%84%E5%86%85%E5%AD%98%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid><description>&lt;h3 id="buffer-pool">Buffer Pool
&lt;a class="header-anchor" href="#buffer-pool">&lt;/a>
&lt;/h3>&lt;p>Buffer Pool本质其实就是数据库的一个内存组件，可以理解为他就是一片内存数据结构.
Buffer Pool默认情况下是128MB&lt;/p></description></item><item><title>【转】InnoDB引擎更新数据过程</title><link>https://blog.sxz799.xyz/posts/mysql%E7%AC%94%E8%AE%B0/2022-04-13-innodb%E5%BC%95%E6%93%8E%E6%9B%B4%E6%96%B0%E6%95%B0%E6%8D%AE%E8%BF%87%E7%A8%8B/</link><pubDate>Wed, 13 Apr 2022 15:04:31 +0000</pubDate><guid>https://blog.sxz799.xyz/posts/mysql%E7%AC%94%E8%AE%B0/2022-04-13-innodb%E5%BC%95%E6%93%8E%E6%9B%B4%E6%96%B0%E6%95%B0%E6%8D%AE%E8%BF%87%E7%A8%8B/</guid><description>&lt;p>&lt;img src="https://blog.sxz799.xyz/imgs/img-lazy-loading.gif" data-src="https://gh.sxz799.online/https://raw.githubusercontent.com/sxz799/tuchuang-blog/main/img/202204/202204131448504.png" alt="" />&lt;/p></description></item><item><title>使用ProGuard混淆你的JAVA代码</title><link>https://blog.sxz799.xyz/posts/java/2020-06-14-%E5%9C%A8maven%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8proguard%E6%B7%B7%E6%B7%86%E4%BD%A0%E7%9A%84java%E4%BB%A3%E7%A0%81/</link><pubDate>Sun, 14 Jun 2020 18:08:11 +0000</pubDate><guid>https://blog.sxz799.xyz/posts/java/2020-06-14-%E5%9C%A8maven%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8proguard%E6%B7%B7%E6%B7%86%E4%BD%A0%E7%9A%84java%E4%BB%A3%E7%A0%81/</guid><description>在Maven项目中使用Proguard十分简单 只要在pom文件的标签内添加如下代码即可 &amp;lt;!-- ProGuard混淆插件--&amp;gt; &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;com.github.wvengen&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;proguard-maven-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.1.0&amp;lt;/version&amp;gt; &amp;lt;executions&amp;gt; &amp;lt;execution&amp;gt; &amp;lt;!-- 混</description></item><item><title>Hexo博客之Valine评论系统及邮件通知插件</title><link>https://blog.sxz799.xyz/posts/blog/2020-02-22-hexo%E5%8D%9A%E5%AE%A2%E4%B9%8Bvaline%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F%E5%8F%8A%E9%82%AE%E4%BB%B6%E9%80%9A%E7%9F%A5%E6%8F%92%E4%BB%B6/</link><pubDate>Sat, 22 Feb 2020 16:18:12 +0000</pubDate><guid>https://blog.sxz799.xyz/posts/blog/2020-02-22-hexo%E5%8D%9A%E5%AE%A2%E4%B9%8Bvaline%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F%E5%8F%8A%E9%82%AE%E4%BB%B6%E9%80%9A%E7%9F%A5%E6%8F%92%E4%BB%B6/</guid><description>在之前的文章中曾经提到过Valine的评论系统，今天来系统的介绍一下使用方法和添加邮件提醒功能。 首先要感谢 Valine 开发好用的项目和DesertsP</description></item><item><title>Mac、PC常用软件分享</title><link>https://blog.sxz799.xyz/posts/%E6%8A%80%E5%B7%A7/2019-12-23-macpc%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%88%86%E4%BA%AB/</link><pubDate>Mon, 23 Dec 2019 22:04:18 +0000</pubDate><guid>https://blog.sxz799.xyz/posts/%E6%8A%80%E5%B7%A7/2019-12-23-macpc%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%88%86%E4%BA%AB/</guid><description>&lt;p>记录在PC和Mac平台下常用的软件自己常用的几款软件&lt;/p></description></item><item><title>Python笔记之模拟键盘鼠标操作</title><link>https://blog.sxz799.xyz/posts/python/2019-12-04-python%E7%AC%94%E8%AE%B0%E4%B9%8B%E6%A8%A1%E6%8B%9F%E9%94%AE%E7%9B%98%E9%BC%A0%E6%A0%87%E6%93%8D%E4%BD%9C/</link><pubDate>Wed, 04 Dec 2019 23:10:53 +0000</pubDate><guid>https://blog.sxz799.xyz/posts/python/2019-12-04-python%E7%AC%94%E8%AE%B0%E4%B9%8B%E6%A8%A1%E6%8B%9F%E9%94%AE%E7%9B%98%E9%BC%A0%E6%A0%87%E6%93%8D%E4%BD%9C/</guid><description>前言：因为手上有两张电话卡，一张是接收验证码用的，而短信转发用的软件是mysms，不巧的是这款软件在ios端无法批量删除短信，好在可以在PC</description></item><item><title>华硕ZX50JX4200黑苹果DSDT/SSDT修补总结(持续更新)</title><link>https://blog.sxz799.xyz/posts/hackintosh/2019-10-19-%E9%BB%91%E8%8B%B9%E6%9E%9C%E4%B9%8B%E5%8D%8E%E7%A1%95zx50jx4200%E9%BB%91%E8%8B%B9%E6%9E%9Cdsdt-ssdt%E4%BF%AE%E8%A1%A5%E6%80%BB%E7%BB%93/</link><pubDate>Sat, 19 Oct 2019 01:10:02 +0000</pubDate><guid>https://blog.sxz799.xyz/posts/hackintosh/2019-10-19-%E9%BB%91%E8%8B%B9%E6%9E%9C%E4%B9%8B%E5%8D%8E%E7%A1%95zx50jx4200%E9%BB%91%E8%8B%B9%E6%9E%9Cdsdt-ssdt%E4%BF%AE%E8%A1%A5%E6%80%BB%E7%BB%93/</guid><description>提取 建议制作Ubuntu的U盘启动提取 反编译 使用iasl 联合反编译 将提取的原始 dsdt和ssdt文件重命名为xxx.aml（xxx为原始文件</description></item><item><title>黑苹果之华硕笔记本键盘灯和Fn快捷键</title><link>https://blog.sxz799.xyz/posts/hackintosh/2019-10-18-%E9%BB%91%E8%8B%B9%E6%9E%9C%E4%B9%8B%E5%8D%8E%E7%A1%95%E7%AC%94%E8%AE%B0%E6%9C%AC%E9%94%AE%E7%9B%98%E7%81%AF%E5%92%8Cfn%E5%BF%AB%E6%8D%B7%E9%94%AE/</link><pubDate>Fri, 18 Oct 2019 21:27:32 +0000</pubDate><guid>https://blog.sxz799.xyz/posts/hackintosh/2019-10-18-%E9%BB%91%E8%8B%B9%E6%9E%9C%E4%B9%8B%E5%8D%8E%E7%A1%95%E7%AC%94%E8%AE%B0%E6%9C%AC%E9%94%AE%E7%9B%98%E7%81%AF%E5%92%8Cfn%E5%BF%AB%E6%8D%B7%E9%94%AE/</guid><description>驱动华硕笔记本的键盘灯和快捷键需要两步 第一步：修改DSDT Haswell机型 打开反编译好的DSDT,搜索“Device (ATKD)”，在其定</description></item><item><title>Git技巧总结(持续更新)</title><link>https://blog.sxz799.xyz/posts/%E6%8A%80%E5%B7%A7/2019-10-17-git%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/</link><pubDate>Thu, 17 Oct 2019 19:45:29 +0000</pubDate><guid>https://blog.sxz799.xyz/posts/%E6%8A%80%E5%B7%A7/2019-10-17-git%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/</guid><description>1.git设置快捷脚本 git config --global alias.bp &amp;#39;!hexo clean;hexo g;gulp g;hexo d&amp;#39; 然后使用 git bpush 就可以一键更新博客并发布了(cd 后面的目录为你的博客文件目录） 取消方式 git config --global --unset alias.bpush 2.gi</description></item><item><title>黑苹果之仿冒白苹果鼠标</title><link>https://blog.sxz799.xyz/posts/hackintosh/2019-10-17-%E9%BB%91%E8%8B%B9%E6%9E%9C%E4%B9%8B%E4%BB%BF%E5%86%92%E7%99%BD%E8%8B%B9%E6%9E%9C%E9%BC%A0%E6%A0%87/</link><pubDate>Thu, 17 Oct 2019 17:11:09 +0000</pubDate><guid>https://blog.sxz799.xyz/posts/hackintosh/2019-10-17-%E9%BB%91%E8%8B%B9%E6%9E%9C%E4%B9%8B%E4%BB%BF%E5%86%92%E7%99%BD%E8%8B%B9%E6%9E%9C%E9%BC%A0%E6%A0%87/</guid><description>仿冒好处 如果你的鼠标有侧键，可以启用部分侧键的功能 需要工具 1.PlistEdit 2.Clover Configurator 正式过程 1.查看关于本机-硬件-USB 查找鼠标对应的产品ID(idProdu</description></item><item><title>修改transmission配置，实现远程访问transmission</title><link>https://blog.sxz799.xyz/posts/%E7%BE%A4%E6%99%96/2019-09-03-%E4%BF%AE%E6%94%B9transmission%E9%85%8D%E7%BD%AE%E5%AE%9E%E7%8E%B0%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE/</link><pubDate>Tue, 03 Sep 2019 16:50:52 +0000</pubDate><guid>https://blog.sxz799.xyz/posts/%E7%BE%A4%E6%99%96/2019-09-03-%E4%BF%AE%E6%94%B9transmission%E9%85%8D%E7%BD%AE%E5%AE%9E%E7%8E%B0%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE/</guid><description>前言 如果没有修改下面设置也是能打开transmission的web界面，但是你会发现一片空白，提示正在连接服务器。 transmission实</description></item><item><title>CentOS更换国内yum源</title><link>https://blog.sxz799.xyz/posts/linux/2019-08-28-centos%E6%9B%B4%E6%8D%A2%E5%9B%BD%E5%86%85yum%E6%BA%90/</link><pubDate>Wed, 28 Aug 2019 12:49:45 +0000</pubDate><guid>https://blog.sxz799.xyz/posts/linux/2019-08-28-centos%E6%9B%B4%E6%8D%A2%E5%9B%BD%E5%86%85yum%E6%BA%90/</guid><description>每次都去百度地址太费劲了，所以整理一下地址 更换方法 1.备份默认yum源 cd /etc/yum.repos.d mv CentOS-Base.repo CentOS-Base.repo.bak 2.下载更换国内yum源 阿里 wget http://mirrors.aliyun.com/repo/Centos-7.repo mv Centos-7.repo CentOS-Base.repo 网易 wget http://mirrors.163.com/.help/CentOS7-Base-163.repo mv CentOS7-Base-163.repo CentOS-Base.repo 3.清理</description></item><item><title>清除Win10系统Windows Defender中病毒扫描记录</title><link>https://blog.sxz799.xyz/posts/%E6%8A%80%E5%B7%A7/2019-06-23-%E6%B8%85%E9%99%A4win10%E7%B3%BB%E7%BB%9Fwindowsdefender%E4%B8%AD%E7%97%85%E6%AF%92%E6%89%AB%E6%8F%8F%E8%AE%B0%E5%BD%95/</link><pubDate>Sun, 23 Jun 2019 20:26:48 +0000</pubDate><guid>https://blog.sxz799.xyz/posts/%E6%8A%80%E5%B7%A7/2019-06-23-%E6%B8%85%E9%99%A4win10%E7%B3%BB%E7%BB%9Fwindowsdefender%E4%B8%AD%E7%97%85%E6%AF%92%E6%89%AB%E6%8F%8F%E8%AE%B0%E5%BD%95/</guid><description>在使用一些小工具，小软件的时候 ⁨Windows Defender⁩经常提示木马或者病毒，而扫描到的病毒记录又没有清除按钮，让一些强迫症患者很难</description></item><item><title>Centos配置本地yum源</title><link>https://blog.sxz799.xyz/posts/linux/2019-06-19-centos%E9%85%8D%E7%BD%AE%E6%9C%AC%E5%9C%B0yum%E6%BA%90/</link><pubDate>Wed, 19 Jun 2019 00:35:12 +0000</pubDate><guid>https://blog.sxz799.xyz/posts/linux/2019-06-19-centos%E9%85%8D%E7%BD%AE%E6%9C%AC%E5%9C%B0yum%E6%BA%90/</guid><description>一、挂载镜像文件 mkdir /mnt/cdrom mount /dev/cdrom /mnt/cdrom 二、修改yum源配置文件 cd /etc/yum.repo.d rm -rf *.repo vi /etc/yum.repo.d/Localyum.repo 内容为： [localyum] name=localyum baseurl=file:///mnt/cdrom gpgcheck=0 enabled=1 三、清空并重建缓存 yum clean all yum makecache</description></item><item><title>Linux下LVM及磁盘配额管理</title><link>https://blog.sxz799.xyz/posts/linux/2019-04-22-linux%E4%B8%8Blvm%E5%8F%8A%E7%A3%81%E7%9B%98%E9%85%8D%E9%A2%9D%E7%AE%A1%E7%90%86/</link><pubDate>Mon, 22 Apr 2019 21:15:51 +0000</pubDate><guid>https://blog.sxz799.xyz/posts/linux/2019-04-22-linux%E4%B8%8Blvm%E5%8F%8A%E7%A3%81%E7%9B%98%E9%85%8D%E9%A2%9D%E7%AE%A1%E7%90%86/</guid><description>一、实验目的 1.理解磁盘配额管理的概念和应用；掌握磁盘配额管理的命令； 2.理解LVM与普通磁盘分区的区别，掌握逻辑卷的创建、扩容等。 二、实验</description></item><item><title>Hexo博客添加Live2D小宠物</title><link>https://blog.sxz799.xyz/posts/blog/2019-04-18-hexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0live2d%E5%B0%8F%E5%AE%A0%E7%89%A9/</link><pubDate>Thu, 18 Apr 2019 17:09:30 +0000</pubDate><guid>https://blog.sxz799.xyz/posts/blog/2019-04-18-hexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0live2d%E5%B0%8F%E5%AE%A0%E7%89%A9/</guid><description>在博客搭建之初这个插件我就用上了，时间久了，难免有些视觉疲劳，所以打算换个宠物。 项目地址 预览地址 一、安装Live2D插件 npm install --save hexo-helper-live2d npm install xxxxx //x</description></item><item><title>Linux下磁盘分区格式化</title><link>https://blog.sxz799.xyz/posts/linux/2019-04-15-linux%E4%B8%8B%E7%A3%81%E7%9B%98%E5%88%86%E5%8C%BA%E6%A0%BC%E5%BC%8F%E5%8C%96/</link><pubDate>Mon, 15 Apr 2019 22:55:45 +0000</pubDate><guid>https://blog.sxz799.xyz/posts/linux/2019-04-15-linux%E4%B8%8B%E7%A3%81%E7%9B%98%E5%88%86%E5%8C%BA%E6%A0%BC%E5%BC%8F%E5%8C%96/</guid><description>一、实验目的 了解linux系统支持的常用文件系统 掌握磁盘分区、格式化，以及磁盘分区挂载的相关命令和操作。 二、实验内容 背景：某公司中的Linu</description></item><item><title>Docker神器之迅雷远程下载(群辉 Linux)</title><link>https://blog.sxz799.xyz/posts/%E7%BE%A4%E6%99%96/2019-04-15-docker%E7%A5%9E%E5%99%A8%E4%B9%8B%E8%BF%85%E9%9B%B7%E8%BF%9C%E7%A8%8B%E4%B8%8B%E8%BD%BD%E7%BE%A4%E8%BE%89linux/</link><pubDate>Mon, 15 Apr 2019 22:22:31 +0000</pubDate><guid>https://blog.sxz799.xyz/posts/%E7%BE%A4%E6%99%96/2019-04-15-docker%E7%A5%9E%E5%99%A8%E4%B9%8B%E8%BF%85%E9%9B%B7%E8%BF%9C%E7%A8%8B%E4%B8%8B%E8%BD%BD%E7%BE%A4%E8%BE%89linux/</guid><description>镜像作者Docker 链接 2022年08月13日19:36:14 现在群晖已经有迅雷的官方客户端了&amp;hellip; 2019-10-16 19:45:58 更新 现在迅雷远程速度很慢，</description></item><item><title>Hexo博客个性化定制</title><link>https://blog.sxz799.xyz/posts/blog/2019-04-13-hexo%E5%8D%9A%E5%AE%A2%E4%B8%AA%E6%80%A7%E5%8C%96%E5%AE%9A%E5%88%B6/</link><pubDate>Sat, 13 Apr 2019 19:56:01 +0000</pubDate><guid>https://blog.sxz799.xyz/posts/blog/2019-04-13-hexo%E5%8D%9A%E5%AE%A2%E4%B8%AA%E6%80%A7%E5%8C%96%E5%AE%9A%E5%88%B6/</guid><description>前言 前段时间给博客换了个域名同时更新了博客的Next主题，最新版的7.1，之前是5.x版本。改动太多就直接clone，然后对照之前的一点点修</description></item><item><title>FRP内网穿透访问家中的NAS和路由器后台</title><link>https://blog.sxz799.xyz/posts/%E8%BD%AF%E8%B7%AF%E7%94%B1/2019-04-11-frp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E8%AE%BF%E9%97%AE%E5%AE%B6%E4%B8%AD%E7%9A%84nas%E5%92%8C%E8%B7%AF%E7%94%B1%E5%99%A8%E5%90%8E%E5%8F%B0/</link><pubDate>Thu, 11 Apr 2019 16:39:01 +0000</pubDate><guid>https://blog.sxz799.xyz/posts/%E8%BD%AF%E8%B7%AF%E7%94%B1/2019-04-11-frp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E8%AE%BF%E9%97%AE%E5%AE%B6%E4%B8%AD%E7%9A%84nas%E5%92%8C%E8%B7%AF%E7%94%B1%E5%99%A8%E5%90%8E%E5%8F%B0/</guid><description>前言 自从入手了蜗牛星际以后，一直在折腾，先是安装了软路由，现在换成了PVE下虚拟LEDE软路由和黑群晖。可以远程访问的NAS才是一个完整的N</description></item><item><title>蜗牛星际之安装PVE+LEDE+群辉</title><link>https://blog.sxz799.xyz/posts/%E8%BD%AF%E8%B7%AF%E7%94%B1/2019-04-06-%E8%9C%97%E7%89%9B%E6%98%9F%E9%99%85%E4%B9%8B%E5%AE%89%E8%A3%85pvelede%E7%BE%A4%E8%BE%89/</link><pubDate>Sat, 06 Apr 2019 19:54:28 +0000</pubDate><guid>https://blog.sxz799.xyz/posts/%E8%BD%AF%E8%B7%AF%E7%94%B1/2019-04-06-%E8%9C%97%E7%89%9B%E6%98%9F%E9%99%85%E4%B9%8B%E5%AE%89%E8%A3%85pvelede%E7%BE%A4%E8%BE%89/</guid><description>前言 上次安装了LEDE软路由后，也挂载了一个500G的硬盘，但总感觉对于J1900+4G内存来说有点浪费，还有那么大哥机箱，如果不做NAS有</description></item><item><title>Docker神器之百度云下载(群辉 LEDE)</title><link>https://blog.sxz799.xyz/posts/%E7%BE%A4%E6%99%96/2019-03-30-docker%E7%A5%9E%E5%99%A8%E4%B9%8B%E7%99%BE%E5%BA%A6%E4%BA%91%E4%B8%8B%E8%BD%BD%E7%BE%A4%E8%BE%89lede/</link><pubDate>Sat, 30 Mar 2019 14:15:50 +0000</pubDate><guid>https://blog.sxz799.xyz/posts/%E7%BE%A4%E6%99%96/2019-03-30-docker%E7%A5%9E%E5%99%A8%E4%B9%8B%E7%99%BE%E5%BA%A6%E4%BA%91%E4%B8%8B%E8%BD%BD%E7%BE%A4%E8%BE%89lede/</guid><description>前言 入手了蜗牛星际，安装了lede以后发现酷软中心的aria2和tr都不能正常工作，可能是版本bug，无意间在论坛发现了利用docker这一</description></item><item><title>软路由LEDE系统之samba局域网共享</title><link>https://blog.sxz799.xyz/posts/%E8%BD%AF%E8%B7%AF%E7%94%B1/2019-03-29-%E8%BD%AF%E8%B7%AF%E7%94%B1lede%E7%B3%BB%E7%BB%9F%E4%B9%8Bsamba%E5%B1%80%E5%9F%9F%E7%BD%91%E5%85%B1%E4%BA%AB/</link><pubDate>Fri, 29 Mar 2019 23:15:56 +0000</pubDate><guid>https://blog.sxz799.xyz/posts/%E8%BD%AF%E8%B7%AF%E7%94%B1/2019-03-29-%E8%BD%AF%E8%B7%AF%E7%94%B1lede%E7%B3%BB%E7%BB%9F%E4%B9%8Bsamba%E5%B1%80%E5%9F%9F%E7%BD%91%E5%85%B1%E4%BA%AB/</guid><description>前言 上周末看油管的时候发现了一款极具性价比的NAS-蜗牛星际。矿渣nas，三月初就开卖了，当时好像200包邮。我入手有点晚所以价格也高一些。</description></item><item><title>Hexo静态博客搭建总结</title><link>https://blog.sxz799.xyz/posts/blog/2019-03-20-hexo%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%80%BB%E7%BB%93/</link><pubDate>Wed, 20 Mar 2019 23:57:50 +0000</pubDate><guid>https://blog.sxz799.xyz/posts/blog/2019-03-20-hexo%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%80%BB%E7%BB%93/</guid><description>第一次搭建博客大约是在18年6月份。当时是在腾讯云vps上安装宝塔，然后宝塔内部一键安装WordPress博客。在18年12月份发现Gith</description></item><item><title>VMware虚拟机体验koolshare论坛LEDE固件</title><link>https://blog.sxz799.xyz/posts/%E8%BD%AF%E8%B7%AF%E7%94%B1/2019-03-17-vmware%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%BD%93%E9%AA%8Ckoolshare%E8%AE%BA%E5%9D%9Blede%E5%9B%BA%E4%BB%B6/</link><pubDate>Sun, 17 Mar 2019 21:38:09 +0000</pubDate><guid>https://blog.sxz799.xyz/posts/%E8%BD%AF%E8%B7%AF%E7%94%B1/2019-03-17-vmware%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%BD%93%E9%AA%8Ckoolshare%E8%AE%BA%E5%9D%9Blede%E5%9B%BA%E4%BB%B6/</guid><description>​ 博主自用的是路由器是斐讯K2P A2版，性能足够满足大多数家庭的需要了，但还是听说koolshare论坛的lede固件功能丰富，是软路由很常</description></item><item><title>虚拟机内系统通过NAT方式连接外网，同时与本机进行通信</title><link>https://blog.sxz799.xyz/posts/%E8%BD%AF%E8%B7%AF%E7%94%B1/2019-03-13-%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%86%85%E7%B3%BB%E7%BB%9F%E9%80%9A%E8%BF%87nat%E6%96%B9%E5%BC%8F%E8%BF%9E%E6%8E%A5%E5%A4%96%E7%BD%91%E5%90%8C%E6%97%B6%E4%B8%8E%E6%9C%AC%E6%9C%BA%E8%BF%9B%E8%A1%8C%E9%80%9A%E4%BF%A1/</link><pubDate>Wed, 13 Mar 2019 21:53:21 +0000</pubDate><guid>https://blog.sxz799.xyz/posts/%E8%BD%AF%E8%B7%AF%E7%94%B1/2019-03-13-%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%86%85%E7%B3%BB%E7%BB%9F%E9%80%9A%E8%BF%87nat%E6%96%B9%E5%BC%8F%E8%BF%9E%E6%8E%A5%E5%A4%96%E7%BD%91%E5%90%8C%E6%97%B6%E4%B8%8E%E6%9C%AC%E6%9C%BA%E8%BF%9B%E8%A1%8C%E9%80%9A%E4%BF%A1/</guid><description>前言 就在今天下午上课的时候突然发现自己好久没有写blog了，可能最近学习太忙，也可能最近没啥好写的。今天上课的时候有同学问到我关于虚拟机系统</description></item></channel></rss>