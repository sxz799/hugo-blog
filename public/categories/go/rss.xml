<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>go on 青丝蘸白雪i</title><link>/categories/go/</link><description>Recent content in go on 青丝蘸白雪i</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Tue, 10 Jan 2023 15:31:07 +0000</lastBuildDate><atom:link href="/categories/go/rss.xml" rel="self" type="application/rss+xml"/><item><title>让Gin-Vue-Admin的表单支持图片</title><link>/posts/golang/2023-01-10-%E8%AE%A9gin-vue-admin%E7%9A%84%E8%A1%A8%E5%8D%95%E6%94%AF%E6%8C%81%E5%9B%BE%E7%89%87/</link><pubDate>Tue, 10 Jan 2023 15:31:07 +0000</pubDate><guid>/posts/golang/2023-01-10-%E8%AE%A9gin-vue-admin%E7%9A%84%E8%A1%A8%E5%8D%95%E6%94%AF%E6%8C%81%E5%9B%BE%E7%89%87/</guid><description>&lt;p>在学习
&lt;a href="https://www.gin-vue-admin.com/" title="gin-vue-admin" rel="noopener external nofollow noreferrer" target="_blank" class=" exturl">
gin-vue-admin
&lt;i class="fa fa-external-link-alt">&lt;/i>
&lt;/a>时发现生成代码时并不支持选择表单输入类型，都是默认的输入框或者下拉框，这样在传图片或附件是就需要手动修改前端来实现此功能。&lt;/p></description></item><item><title>让Gin-Vue-Admin的字典值支持字符串</title><link>/posts/golang/2023-01-09-%E8%AE%A9gin-vue-admin%E7%9A%84%E5%AD%97%E5%85%B8%E5%80%BC%E6%94%AF%E6%8C%81%E5%AD%97%E7%AC%A6%E4%B8%B2/</link><pubDate>Mon, 09 Jan 2023 19:29:57 +0000</pubDate><guid>/posts/golang/2023-01-09-%E8%AE%A9gin-vue-admin%E7%9A%84%E5%AD%97%E5%85%B8%E5%80%BC%E6%94%AF%E6%8C%81%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid><description>&lt;p>最近在学习
&lt;a href="https://www.gin-vue-admin.com/" title="gin-vue-admin" rel="noopener external nofollow noreferrer" target="_blank" class=" exturl">
gin-vue-admin
&lt;i class="fa fa-external-link-alt">&lt;/i>
&lt;/a>开发平台，发现在配置字典时，字典值只能使用int，不能使用string，这样就会导致后期做报表开发时，查看数据库内容时容易摸不到头脑，所以准备改一下源码，使其字典值支持string！&lt;/p></description></item><item><title>Golang中函数返回值注意点</title><link>/posts/golang/2022-12-09-golang%E4%B8%AD%E5%87%BD%E6%95%B0%E8%BF%94%E5%9B%9E%E5%80%BC%E6%B3%A8%E6%84%8F%E7%82%B9/</link><pubDate>Fri, 09 Dec 2022 16:20:32 +0000</pubDate><guid>/posts/golang/2022-12-09-golang%E4%B8%AD%E5%87%BD%E6%95%B0%E8%BF%94%E5%9B%9E%E5%80%BC%E6%B3%A8%E6%84%8F%E7%82%B9/</guid><description>&lt;p>Go语言函数返回值又两种方法，如下代码：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#c9d1d9;background-color:#0d1117;-moz-tab-size:1;-o-tab-size:1;tab-size:1;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff7b72">func&lt;/span> &lt;span style="color:#d2a8ff;font-weight:bold">GoReturn1&lt;/span>() &lt;span style="color:#ff7b72">int&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> a &lt;span style="color:#ff7b72;font-weight:bold">:=&lt;/span> &lt;span style="color:#a5d6ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff7b72">return&lt;/span> a
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff7b72">func&lt;/span> &lt;span style="color:#d2a8ff;font-weight:bold">GoReturn2&lt;/span>() (a &lt;span style="color:#ff7b72">int&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> a = &lt;span style="color:#a5d6ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff7b72">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff7b72">func&lt;/span> &lt;span style="color:#d2a8ff;font-weight:bold">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fmt.&lt;span style="color:#d2a8ff;font-weight:bold">Println&lt;/span>(&lt;span style="color:#a5d6ff">&amp;#34;返回值1：&amp;#34;&lt;/span>, &lt;span style="color:#d2a8ff;font-weight:bold">GoReturn1&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fmt.&lt;span style="color:#d2a8ff;font-weight:bold">Println&lt;/span>(&lt;span style="color:#a5d6ff">&amp;#34;返回值2：&amp;#34;&lt;/span>, &lt;span style="color:#d2a8ff;font-weight:bold">GoReturn2&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Golang泛型学习笔记</title><link>/posts/golang/2022-12-09-golang%E6%B3%9B%E5%9E%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link><pubDate>Fri, 09 Dec 2022 10:49:28 +0000</pubDate><guid>/posts/golang/2022-12-09-golang%E6%B3%9B%E5%9E%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid><description>&lt;h2 id="什么是泛型">什么是泛型？
&lt;a class="header-anchor" href="#%e4%bb%80%e4%b9%88%e6%98%af%e6%b3%9b%e5%9e%8b">&lt;/a>
&lt;/h2>&lt;p>泛型程序设计（generic programming）是程序设计语言的一种风格或范式。泛型允许程序员在强类型程序设计语言中编写代码时使用一些以后才指定的类型，在实例化时作为参数指明这些类型。&lt;/p></description></item></channel></rss>