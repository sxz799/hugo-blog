<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>golang on 青丝蘸白雪i</title><link>https://b.sxz799.fun/categories/golang/</link><description>Recent content in golang on 青丝蘸白雪i</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Wed, 01 Mar 2023 16:01:19 +0800</lastBuildDate><atom:link href="https://b.sxz799.fun/categories/golang/rss.xml" rel="self" type="application/rss+xml"/><item><title>Map底层原理学习笔记</title><link>https://b.sxz799.fun/posts/golang/2023-03-01-goang-map%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link><pubDate>Wed, 01 Mar 2023 16:01:19 +0800</pubDate><guid>https://b.sxz799.fun/posts/golang/2023-03-01-goang-map%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid><description>&lt;p>golang Map底层原理学习笔记&lt;/p>
&lt;p>
&lt;a href="https://github.com/WuPeiqi/go_course/blob/master/day06%20%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%EF%BC%9A%E6%8C%87%E9%92%88%E3%80%81%E5%88%87%E7%89%87%E3%80%81%E5%AD%97%E5%85%B8/%E7%AC%94%E8%AE%B0/day06%20%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.md" title="课程来源" rel="noopener external nofollow noreferrer" target="_blank" class=" exturl">
课程来源
&lt;i class="fa fa-external-link-alt">&lt;/i>
&lt;/a>&lt;/p></description></item><item><title>Golang切片扩容学习笔记</title><link>https://b.sxz799.fun/posts/golang/2023-02-28-golang%E5%88%87%E7%89%87%E6%89%A9%E5%AE%B9%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link><pubDate>Tue, 28 Feb 2023 14:04:04 +0800</pubDate><guid>https://b.sxz799.fun/posts/golang/2023-02-28-golang%E5%88%87%E7%89%87%E6%89%A9%E5%AE%B9%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid><description>&lt;p>在学习golang切片时看到说golang的扩容机制是小于1024时进行double,超过1024后每次增加1/4，但是自己尝试后并非如此，于是扒了下golang的源码研究一番。&lt;/p></description></item><item><title>Golang逃逸分析</title><link>https://b.sxz799.fun/posts/golang/2023-02-09-golang%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90/</link><pubDate>Thu, 09 Feb 2023 15:29:08 +0800</pubDate><guid>https://b.sxz799.fun/posts/golang/2023-02-09-golang%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90/</guid><description>&lt;h2 id="案例">案例
&lt;a class="header-anchor" href="#%e6%a1%88%e4%be%8b">&lt;/a>
&lt;/h2>&lt;p>先看一段C语言代码&lt;/p></description></item><item><title>Golang Select</title><link>https://b.sxz799.fun/posts/golang/2023-02-09-golang-select/</link><pubDate>Thu, 09 Feb 2023 11:29:08 +0800</pubDate><guid>https://b.sxz799.fun/posts/golang/2023-02-09-golang-select/</guid><description>&lt;h2 id="go-select用处">go select用处
&lt;a class="header-anchor" href="#go-select%e7%94%a8%e5%a4%84">&lt;/a>
&lt;/h2>&lt;p>select是一种go可以处理多个通道之间的机制，看起来和switch语句很相似，但是select其实和IO机制中的select一样，多路复用通道，随机选取一个进行执行，如果说通道(channel)实现了多个goroutine之前的同步或者通信，那么select则实现了多个通道(channel)的同步或者通信，并且select具有阻塞的特性。&lt;/p></description></item><item><title>GMP模型</title><link>https://b.sxz799.fun/posts/golang/2023-02-08-gmp%E6%A8%A1%E5%9E%8B/</link><pubDate>Wed, 08 Feb 2023 16:29:08 +0800</pubDate><guid>https://b.sxz799.fun/posts/golang/2023-02-08-gmp%E6%A8%A1%E5%9E%8B/</guid><description>&lt;h2 id="什么是gmp模型">什么是GMP模型？
&lt;a class="header-anchor" href="#%e4%bb%80%e4%b9%88%e6%98%afgmp%e6%a8%a1%e5%9e%8b">&lt;/a>
&lt;/h2>&lt;ul>
&lt;li>G：gorotine（协程）&lt;/li>
&lt;li>M：machine（内核线程）&lt;/li>
&lt;li>P：processor(调度器)&lt;/li>
&lt;/ul>
&lt;p>Go语言运行时，通过核心元素G，M，P 和 自己的调度器，实现了自己的并发线程模型。调度器通过对G，M，P的调度实现了两级线程模型中操作系统内核之外的调度任务。&lt;/p></description></item><item><title>面试题整理(Golang方向)</title><link>https://b.sxz799.fun/posts/golang/2023-02-06-golang%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/</link><pubDate>Mon, 06 Feb 2023 16:29:08 +0800</pubDate><guid>https://b.sxz799.fun/posts/golang/2023-02-06-golang%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/</guid><description>&lt;p>面试题整理(Golang方向)&lt;/p></description></item></channel></rss>